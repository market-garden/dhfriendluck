<?php
 if (!defined('THINK_PATH')) exit(); if(version_compare(PHP_VERSION,'6.0.0','<') ) { @set_magic_quotes_runtime (0); define('MAGIC_QUOTES_GPC',get_magic_quotes_gpc()?True:False); } define('MEMORY_LIMIT_ON',function_exists('memory_get_usage')?true:false); if(MEMORY_LIMIT_ON) { $GLOBALS['_startUseMems'] = memory_get_usage(); } define('IS_CGI',substr(PHP_SAPI, 0,3)=='cgi' ? 1 : 0 ); define('IS_WIN',strstr(PHP_OS, 'WIN') ? 1 : 0 ); define('IS_CLI',PHP_SAPI=='cli'? 1 : 0); function RemoveXSS($val) { $val = preg_replace('/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/', '', $val); $search = 'abcdefghijklmnopqrstuvwxyz'; $search .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; $search .= '1234567890!@#$%^&amp;*()'; $search .= '~`&quot;;:?+/={}[]-_|\'\\'; for ($i = 0; $i < strlen($search); $i++) { $val = preg_replace('/(&amp;#[xX]0{0,8}'.dechex(ord($search[$i])).';?)/i', $search[$i], $val); $val = preg_replace('/(&amp;#0{0,8}'.ord($search[$i]).';?)/', $search[$i], $val); } $ra1 = Array('javascript', 'vbscript', 'expression', 'applet', 'meta', 'xml', 'blink', 'link', 'style', 'script', 'embed', 'object', 'iframe', 'frame', 'frameset', 'ilayer', 'layer', 'bgsound', 'title', 'base'); $ra2 = Array('onabort', 'onactivate', 'onafterprint', 'onafterupdate', 'onbeforeactivate', 'onbeforecopy', 'onbeforecut', 'onbeforedeactivate', 'onbeforeeditfocus', 'onbeforepaste', 'onbeforeprint', 'onbeforeunload', 'onbeforeupdate', 'onblur', 'onbounce', 'oncellchange', 'onchange', 'onclick', 'oncontextmenu', 'oncontrolselect', 'oncopy', 'oncut', 'ondataavailable', 'ondatasetchanged', 'ondatasetcomplete', 'ondblclick', 'ondeactivate', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'onerror', 'onerrorupdate', 'onfilterchange', 'onfinish', 'onfocus', 'onfocusin', 'onfocusout', 'onhelp', 'onkeydown', 'onkeypress', 'onkeyup', 'onlayoutcomplete', 'onload', 'onlosecapture', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onmove', 'onmoveend', 'onmovestart', 'onpaste', 'onpropertychange', 'onreadystatechange', 'onreset', 'onresize', 'onresizeend', 'onresizestart', 'onrowenter', 'onrowexit', 'onrowsdelete', 'onrowsinserted', 'onscroll', 'onselect', 'onselectionchange', 'onselectstart', 'onstart', 'onstop', 'onsubmit', 'onunload'); $ra = array_merge($ra1, $ra2); $found = true; while ($found == true) { $val_before = $val; for ($i = 0; $i < sizeof($ra); $i++) { $pattern = '/'; for ($j = 0; $j < strlen($ra[$i]); $j++) { if ($j > 0) { $pattern .= '('; $pattern .= '(&amp;#[xX]0{0,8}([9ab]);)'; $pattern .= '|'; $pattern .= '|(&amp;#0{0,8}([9|10|13]);)'; $pattern .= ')*'; } $pattern .= $ra[$i][$j]; } $pattern .= '/i'; $replacement = substr($ra[$i], 0, 2).'&lt;x&gt;'.substr($ra[$i], 2); $val = preg_replace($pattern, $replacement, $val); if ($val_before == $val) { $found = false; } } } return $val; } if(!IS_CLI) { if(!defined('_PHP_FILE_')) { if(IS_CGI) { $_temp = explode('.php',$_SERVER["PHP_SELF"]); define('_PHP_FILE_', rtrim(str_replace($_SERVER["HTTP_HOST"],'',$_temp[0].'.php'),'/')); }else { define('_PHP_FILE_', rtrim($_SERVER["SCRIPT_NAME"],'/')); } } if(!defined('WEB_URL')) { if( strtoupper(APP_NAME) == strtoupper(basename(dirname(_PHP_FILE_))) ) { $_root = dirname(dirname(_PHP_FILE_)); }else { $_root = dirname(_PHP_FILE_); } define('WEB_URL', (($_root=='/' || $_root=='\\')?'':$_root)); } define('URL_COMMON', 0); define('URL_PATHINFO', 1); define('URL_REWRITE', 2); define('URL_COMPAT', 3); } define('THINK_VERSION', '1.6RC1'); 
 define('CACHE_DIR', 'Cache'); define('HTML_DIR', 'Html'); define('CONF_DIR', 'Conf'); define('LIB_DIR', 'Lib'); define('LOG_DIR', 'Logs'); define('LANG_DIR', 'Lang'); define('TEMP_DIR', 'Temp'); define('TMPL_DIR', 'Tpl'); define('TMPL_PATH', APP_PATH.'/'.TMPL_DIR.'/'); define('HTML_PATH', APP_PATH.'/'.HTML_DIR.'/'); define('COMMON_PATH', APP_PATH.'/Common/'); define('LIB_PATH', APP_PATH.'/'.LIB_DIR.'/'); define('CACHE_PATH', RUNTIME_PATH.CACHE_DIR.'/'); define('CONFIG_PATH', APP_PATH.'/'.CONF_DIR.'/'); define('LOG_PATH', RUNTIME_PATH.LOG_DIR.'/'); define('LANG_PATH', APP_PATH.'/'.LANG_DIR.'/'); define('TEMP_PATH', RUNTIME_PATH.TEMP_DIR.'/'); define('DATA_PATH', RUNTIME_PATH.'Data/'); define('VENDOR_PATH',THINK_PATH.'/Vendor/'); set_include_path(get_include_path() . PATH_SEPARATOR . VENDOR_PATH); 
 function U($url,$params=array(),$redirect=false,$suffix=true) { if(0===strpos($url,'/')) { $url = substr($url,1); } if(!strpos($url,'://')) { $url = APP_NAME.'://'.$url; } if(stripos($url,'@?')) { $url = str_replace('@?','@think?',$url); }elseif(stripos($url,'@')) { $url = $url.MODULE_NAME; } $array = parse_url($url); $app = isset($array['scheme'])? $array['scheme'] :APP_NAME; $route = isset($array['user'])?$array['user']:''; if(isset($array['path'])) { $action = substr($array['path'],1); if(!isset($array['host'])) { $module = MODULE_NAME; }else{ $module = $array['host']; } }else{ $module = MODULE_NAME; $action = $array['host']; } if(isset($array['query'])) { parse_str($array['query'],$query); $params = array_merge($query,$params); } if(C('DISPATCH_ON') && C('URL_MODEL')>0) { $depr = C('PATH_MODEL')==2?C('PATH_DEPR'):'/'; $str = $depr; foreach ($params as $var=>$val) $str .= $var.$depr.$val.$depr; $str = substr($str,0,-1); if(!empty($route)) { $url = str_replace(APP_NAME,$app,__APP__).'/'.$route.$str; }else{ $url = str_replace(APP_NAME,$app,__APP__).'/'.$module.$depr.$action.$str; } if($suffix && C('HTML_URL_SUFFIX')) { $url .= C('HTML_URL_SUFFIX'); } }else{ $params = http_build_query($params); $url = str_replace(APP_NAME,$app,__APP__).'?'.C('VAR_MODULE').'='.$module.'&'.C('VAR_ACTION').'='.$action.'&'.$params; } if($redirect) { redirect($url); }else{ return $url; } } function halt($error) { if(IS_CLI) { exit ($error); } $e = array(); if(C('DEBUG_MODE')){ if(!is_array($error)) { $trace = debug_backtrace(); $e['message'] = $error; $e['file'] = $trace[0]['file']; $e['class'] = $trace[0]['class']; $e['function'] = $trace[0]['function']; $e['line'] = $trace[0]['line']; $traceInfo=''; $time = date("y-m-d H:i:m"); foreach($trace as $t) { $traceInfo .= '['.$time.'] '.$t['file'].' ('.$t['line'].') '; $traceInfo .= $t['class'].$t['type'].$t['function'].'('; $traceInfo .= implode(', ', $t['args']); $traceInfo .=")<br/>"; } $e['trace'] = $traceInfo; }else { $e = $error; } if(C('EXCEPTION_TMPL_FILE')) { include C('EXCEPTION_TMPL_FILE'); }else{ include THINK_PATH.'/Tpl/ThinkException.tpl.php'; } } else { $error_page = C('ERROR_PAGE'); if(!empty($error_page)){ redirect($error_page); }else { if(C('SHOW_ERROR_MSG')) { $e['message'] = is_array($error)?$error['message']:$error; }else{ $e['message'] = C('ERROR_MESSAGE'); } if(C('EXCEPTION_TMPL_FILE')) { include C('EXCEPTION_TMPL_FILE'); }else{ include THINK_PATH.'/Tpl/ThinkException.tpl.php'; } } } exit; } function redirect($url,$time=0,$msg='') { $url = str_replace(array("\n", "\r"), '', $url); if(empty($msg)) { $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; } if (!headers_sent()) { if(0===$time) { header("Location: ".$url); }else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); }else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if($time!=0) { $str .= $msg; } exit($str); } } function throw_exception($msg,$type='ThinkException',$code=0) { if(IS_CLI) { exit($msg); } if(class_exists($type,false)){ throw new $type($msg,$code,true); }else { halt($msg); } } function debug_start($label='') { $GLOBALS[$label]['_beginTime'] = microtime(TRUE); if ( MEMORY_LIMIT_ON ) $GLOBALS[$label]['memoryUseStartTime'] = memory_get_usage(); } function debug_end($label='') { $GLOBALS[$label]['_endTime'] = microtime(TRUE); echo '<div style="text-align:center;width:100%">Process '.$label.': Times '.number_format($GLOBALS[$label]['_endTime']-$GLOBALS[$label]['_beginTime'],6).'s '; if ( MEMORY_LIMIT_ON ) { $GLOBALS[$label]['memoryUseEndTime'] = memory_get_usage(); echo ' Memories '.number_format(($GLOBALS[$label]['memoryUseEndTime']-$GLOBALS[$label]['memoryUseStartTime'])/1024).' k'; } echo '</div>'; } function dump($var, $echo=true,$label=null, $strict=true) { echo '<div style="border:1px solid #dbdbdb; padding:5px; margin:5px; width:auto; color:#003300;background:#fff;text-align:left;">'; $label = ($label===null) ? '' : rtrim($label) . ' '; if(!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = "<pre>".$label.htmlspecialchars($output,ENT_QUOTES)."</pre>"; } else { $output = $label . " : " . print_r($var, true); } }else { ob_start(); var_dump($var); $output = ob_get_clean(); if(!extension_loaded('xdebug')) { $output = preg_replace("/\]\=\>\n(\s+)/m", "] => ", $output); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>'; } } if ($echo) { echo($output); echo '</div>'; return null; }else { return $output; echo '</div>'; } } function get_instance_of($className,$method='',$args=array()) { static $_instance = array(); if(empty($args)) { $identify = $className.$method; }else{ $identify = $className.$method.to_guid_string($args); } if (!isset($_instance[$identify])) { if(class_exists($className)){ $o = new $className(); if(method_exists($o,$method)){ if(!empty($args)) { $_instance[$identify] = call_user_func_array(array(&$o, $method), $args); }else { $_instance[$identify] = $o->$method(); } } else $_instance[$identify] = $o; } else halt(L('_CLASS_NOT_EXIST_').':'.$className); } return $_instance[$identify]; } function __autoload($classname) { if(substr($classname,-5)=="Model") { require_cache(LIB_PATH.'Model/'.$classname.'.class.php'); }elseif(substr($classname,-6)=="Action"){ require_cache(LIB_PATH.'Action/'.$classname.'.class.php'); }else { if(alias_import($classname)) return ; if(C('AUTO_LOAD_PATH')) { $paths = explode(',',C('AUTO_LOAD_PATH')); foreach ($paths as $path){ if(import($path.$classname)) { return ; } } } } return ; } function require_cache($filename) { static $_importFiles = array(); $filename = realpath($filename); if (!isset($_importFiles[$filename])) { if(file_exists_case($filename)){ require $filename; $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function file_exists_case($filename) { if(is_file($filename)) { if(IS_WIN && C('CHECK_FILE_CASE')) { if(basename(realpath($filename)) != basename($filename)) { return false; } } return true; } return false; } function import($class,$baseUrl = '',$ext='.class.php') { static $_file = array(); static $_class = array(); $class = str_replace(array('.','#'), array('/','.'), $class); if('' === $baseUrl && false === strpos($class,'/')) { return alias_import($class); } if(isset($_file[$class.$baseUrl])) return true; else $_file[$class.$baseUrl] = true; $class_strut = explode("/",$class); if(empty($baseUrl)) { if('@'==$class_strut[0] || APP_NAME == $class_strut[0] ) { $baseUrl = dirname(LIB_PATH); $class = str_replace(array(APP_NAME.'/','@/'),LIB_DIR.'/',$class); }elseif(in_array(strtolower($class_strut[0]),array('think','org','com'))) { $baseUrl = THINK_PATH.'/Lib/'; }else { $class = substr_replace($class, '', 0,strlen($class_strut[0])+1); $baseUrl = APP_PATH.'/../'.$class_strut[0].'/'.LIB_DIR.'/'; } } if(substr($baseUrl, -1) != "/") $baseUrl .= "/"; $classfile = $baseUrl . $class . $ext; if($ext == '.class.php' && is_file($classfile)) { $class = basename($classfile,$ext); if(isset($_class[$class])) { throw_exception(L('_CLASS_CONFLICT_').':'.$_class[$class].' '.$classfile); } $_class[$class] = $classfile; } return require_cache($classfile); } function vendor($class,$baseUrl = '',$ext='.php') { if(empty($baseUrl)) { $baseUrl = VENDOR_PATH; } return import($class,$baseUrl,$ext); } function alias_import($alias,$classfile='') { static $_alias = array(); if('' !== $classfile) { $_alias[$alias] = realpath($classfile); return ; } if(is_string($alias)) { if(isset($_alias[$alias])) { return require_cache($_alias[$alias]); } }elseif(is_array($alias)){ foreach ($alias as $key=>$val){ $_alias[$key] = realpath($val); } return ; } return false; } function D($className='',$appName='') { static $_model = array(); if(empty($className)) { return new Model(); } if(empty($appName)) { $appName = C('DEFAULT_MODEL_APP'); } if(isset($_model[$appName.$className])) { return $_model[$appName.$className]; } $OriClassName = $className; $className = $className.'Model'; if('@'===$appName) { require_cache(LIB_PATH.'Model/'.$className.'.class.php'); }else{ require_cache(SITE_PATH.'/apps/'.$appName.'/Lib/Model/'.$className.".class.php"); } if(class_exists($className)) { $model = new $className(); $_model[$appName.$OriClassName] = $model; return $model; }else { throw_exception($className.L('_MODEL_NOT_EXIST_')); } } function A($className,$appName='@') { static $_action = array(); if(isset($_action[$appName.$className])) { return $_action[$appName.$className]; } $OriClassName = $className; $className = $className.'Action'; if('@'===$appName) { require_cache(LIB_PATH.'Action/'.$className.'.class.php'); }else{ import($appName.'.Action.'.$className); } if(class_exists($className)) { $action = new $className(); $_action[$appName.$OriClassName] = $action; return $action; }else { return false; } } function R($module,$action,$app='@') { $class = A($module,$app); if($class) { return call_user_func(array(&$class,$action)); }else{ return false; } } function L($name='',$value=null) { static $_lang = array(); if(!is_null($value)) { $_lang[strtolower($name)] = $value; return; } if(empty($name)) { return $_lang; } if(is_array($name)) { $_lang = array_merge($_lang,array_change_key_case($name)); return; } if(isset($_lang[strtolower($name)])) { return $_lang[strtolower($name)]; }else{ return "undefined_lang_{$name}"; } } function C($name='',$value=null) { static $_config = array(); if(!is_null($value)) { if(strpos($name,'.')) { $array = explode('.',$name); $_config[strtolower($array[0])][$array[1]] = $value; }else{ $_config[strtolower($name)] = $value; } return ; } if(empty($name)) { return $_config; } if(is_array($name)) { $_config = array_merge($_config,array_change_key_case($name)); return $_config; }elseif(strpos($name,'.')) { $array = explode('.',$name); return $_config[strtolower($array[0])][$array[1]]; }elseif(isset($_config[strtolower($name)])) { return $_config[strtolower($name)]; }else{ return NULL; } } function tag($name,$params=array()) { $tags = C('_tags_.'.$name); if($tags) { foreach ($tags as $key=>$call){ if(is_callable($call)) { $result = call_user_func_array($call,$params); } } return $result; } return false; } function B($name,$options = null) { $class = $name.'Behavior'; require_cache(LIB_PATH.'Behavior/'.$class.'.class.php'); if (!class_exists($class)){ require_cache(THINK_PATH.'/../thinksns/Lib/Behavior/'.$class.'.class.php'); } $behavior = new $class($options); return $behavior->run(); } function W($name,$data=array(),$return=false) { $class = $name.'Widget'; require_cache(LIB_PATH.'Widget/'.$class.'.class.php'); if (!class_exists($class)){ require_cache(THINK_PATH.'/../thinksns/Lib/Widget/'.$class.'.class.php'); } $widget = new $class(); $content = $widget->render($data); if($return) { return $content; }else{ echo $content; } } function S($name,$value='',$expire='',$type='') { static $_cache = array(); alias_import('Cache'); $cache = Cache::getInstance($type); if('' !== $value) { if(is_null($value)) { $result = $cache->rm($name); if($result) { unset($_cache[$type.'_'.$name]); } return $result; }else{ $cache->set($name,$value,$expire); $_cache[$type.'_'.$name] = $value; } return ; } if(isset($_cache[$type.'_'.$name])) { return $_cache[$type.'_'.$name]; } $value = $cache->get($name); $_cache[$type.'_'.$name] = $value; return $value; } function F($name,$value='',$expire=-1,$path=DATA_PATH) { static $_cache = array(); $filename = $path.$name.'.php'; if('' !== $value) { if(is_null($value)) { $result = unlink($filename); if($result) { unset($_cache[$name]); } return $result; }else{ $content = "<?php\nif (!defined('THINK_PATH')) exit();\n//".sprintf('%012d',$expire)."\nreturn ".var_export($value,true).";\n?>"; $result = file_put_contents($filename,$content); $_cache[$name] = $value; } return ; } if(isset($_cache[$name])) { return $_cache[$name]; } if(is_file($filename) && false !== $content = file_get_contents($filename)) { $expire = (int)substr($content,44, 12); if($expire != -1 && time() > filemtime($filename) + $expire) { unlink($filename); return false; } $str = substr($content,57,-2); $value = eval($str); $_cache[$name] = $value; }else{ $value = false; } return $value; } function to_guid_string($mix) { if(is_object($mix) && function_exists('spl_object_hash')) { return spl_object_hash($mix); }elseif(is_resource($mix)){ $mix = get_resource_type($mix).strval($mix); }else{ $mix = serialize($mix); } return md5($mix); } function xml_encode($data,$encoding='utf-8',$root="think") { $xml = '<?xml version="1.0" encoding="'.$encoding.'"?>'; $xml.= '<'.$root.'>'; $xml.= data_to_xml($data); $xml.= '</'.$root.'>'; return $xml; } function data_to_xml($data) { if(is_object($data)) { $data = get_object_vars($data); } $xml = ''; foreach($data as $key=>$val) { is_numeric($key) && $key="item id=\"$key\""; $xml.="<$key>"; $xml.=(is_array($val)||is_object($val))?data_to_xml($val):$val; list($key,)=explode(' ',$key); $xml.="</$key>"; } return $xml; } function compile($filename) { if(defined('STRIP_RUNTIME_SPACE') && STRIP_RUNTIME_SPACE == false ) { $content = file_get_contents($filename); }else{ $content = php_strip_whitespace($filename); } $content = substr(trim($content),5); if('?>' == substr($content,-2)) { $content = substr($content,0,-2); } return $content; } function mk_dir($dir, $mode = 0755) { if (is_dir($dir) || @mkdir($dir,$mode)) return true; if (!mk_dir(dirname($dir),$mode)) return false; return @mkdir($dir,$mode); } function auto_charset($fContents,$from,$to){ $from = strtoupper($from)=='UTF8'? 'utf-8':$from; $to = strtoupper($to)=='UTF8'? 'utf-8':$to; if( strtoupper($from) === strtoupper($to) || empty($fContents) || (is_scalar($fContents) && !is_string($fContents)) ){ return $fContents; } if(is_string($fContents) ) { if(function_exists('mb_convert_encoding')){ return mb_convert_encoding ($fContents, $to, $from); }elseif(function_exists('iconv')){ return iconv($from,$to,$fContents); }else{ return $fContents; } } elseif(is_array($fContents)){ foreach ( $fContents as $key => $val ) { $_key = auto_charset($key,$from,$to); $fContents[$_key] = auto_charset($val,$from,$to); if($key != $_key ) { unset($fContents[$key]); } } return $fContents; } else{ return $fContents; } } 
function friendlyDate($sTime,$type = 'normal',$alt = 'false') { if(!$sTime) { return ''; } $cTime = time(); $dTime = $cTime - $sTime; $dDay = intval(date("Ymd",$cTime)) - intval(date("Ymd",$sTime)); $dYear = intval(date("Y",$cTime)) - intval(date("Y",$sTime)); if($type=='normal') { if( $dTime < 60 ) { return $dTime."秒前"; }elseif( $dTime < 3600 ) { return intval($dTime/60)."分钟前"; }elseif( $dTime >= 3600 && $dDay == 0 ) { return intval($dTime/3600)."小时前"; }elseif($dYear==0) { return date("m-d H:i",$sTime); }else { return date("y-m-d H:i",$sTime); } }elseif($type=='full') { return date("y-m-d H:i",$sTime); }elseif($type=='month') { return date("m-d H:i",$sTime); }else { if( $dTime < 60 ) { return $dTime."秒前"; }elseif( $dTime < 3600 ) { return intval($dTime/60)."分钟前"; }elseif( $dTime >= 3600 && $dDay == 0 ) { return intval($dTime/3600)."小时前"; }elseif($dYear==0) { return date("y-m-d H:i",$sTime); }else { return date("y-m-d H:i",$sTime); } } } function new_addslashes($string) { if(!is_array($string)) return addslashes(trim($string)); foreach($string as $key => $val) $string[$key] = new_addslashes($val); return $string; } function forTag($string) { return str_replace(array('"',"'"), array('&quot;','&#039;'), $string); } function tt($string,$length="") { if(!is_array($string)) { $str = htmlspecialchars($string); if($length) { $str = msubstr($str,0,$length); } return $str; } foreach($string as $key => $val) $string[$key] = textarea_output($val); return $string; } function textarea_output($string) { if(!is_array($string)) return nl2br(htmlspecialchars($string)); foreach($string as $key => $val) $string[$key] = textarea_output($val); return $string; } function textarea_edit($string) { if(!is_array($string)) return forTag($string); foreach($string as $key => $val) $string[$key] = textarea_edit($val); return $string; } function html_output($str) { $farr = array( "/\s /", "/<(\/?)(script|i?frame|style|html|body|title|link|meta\?|\%)([^>]*?)>/isU", "/(<[^>]*)on[a-zA-Z] \s*=([^>]*>)/isU", ); $tarr = array( " ", "＜\\1\\2\\3＞", "\\1\\2", ); $str = preg_replace( $farr,$tarr,$str); while(preg_match('/(<[^><]+)(lang|onfinish|onmouse|onexit|onerror|onkey|onload|onchange|onfocus|onblur)[^><]+/i',$str,$mat)) { $str=str_replace($mat[2],"xyz",$str); } return $str; } function html_output2($str) { $farr = array( "/\s /", "/<(\/?)(script|i?frame|style|html|body|title|link|meta\?|\%)([^>]*?)>/isU", "/(<[^>]*)on[a-zA-Z] \s*=([^>]*>)/isU", ); $tarr = array( " ", "＜\\1\\2\\3＞", "\\1\\2", ); $str = preg_replace( $farr,$tarr,$str); while(preg_match('/(<[^><]+)(lang|onfinish|onmouse|onexit|onerror|onkey|onload|onchange|onfocus|onblur)[^><]+/i',$str,$mat)) { $str=str_replace($mat[2],"xyz",$str); } return $str; } function cleanJs($text) { $text = trim($text); $text = stripslashes($text); $text = preg_replace('/<!--?.*-->/','',$text); $text = preg_replace('/<\?|\?>/','',$text); $text = preg_replace('/<script?.*\/script>/','',$text); $text = preg_replace('/<\/?(html|head|meta|link|base|body|title|style|script|form|iframe|frame|frameset)[^><]*>/i','',$text); while(preg_match('/(<[^><]+)(lang|onfinish|onmouse|onexit|onerror|onkey|onload|onchange|onfocus|onblur|style)[^><]+/i',$text,$mat)) { $text=str_replace($mat[0],$mat[1],$text); } while(preg_match('/(<[^><]+)(window\.|js:|javascript:|about:|file:|document\.|vbs:|vbscript:|cookie)([^><]*)/i',$text,$mat)) { $text=str_replace($mat[0],$mat[1].$mat[3],$text); } $text = str_replace('  ',' ',$text); return $text; } function t($text) { $text = cleanJs($text); $text = strip_tags($text); $text = htmlspecialchars($text); return $text; } function h($text) { $text = cleanJs($text); return $text; } function checkDir($path) { $pathArray = explode('/',$path); $nowPath = ''; array_pop($pathArray); foreach ($pathArray as $key=>$value) { if ( ''==$value ) { unset($pathArray[$key]); }else { if ( $key == 0 ) $nowPath .= $value; else $nowPath .= '/'.$value; if ( !is_dir($nowPath) ) { if ( !mkdir($nowPath, 0777) ) return false; } } } return true; } function ts_cache($key,$value="__secache_get",$expireTime=-1,$type="secache") { if($type == "secache") { vendor("secache"); $cache = new secache; if(!is_dir(C('Cache_Data'))){ mk_dir(C('Cache_Data')); } $cache->workat(C('Cache_Data')); if($value && $value != "__secache_get") { $var["content"] = $value; $var["time"] = ($expireTime==-1)?-1: (time()+$expireTime); return $cache->store(md5($key),$var); }elseif(!$value) { return $cache->delete(md5($key)); }else { $cache->fetch(md5($key),$var); if($var["time"] <0 || $var["time"]>time()) { return $var["content"]; }else { return false; } } } } function unescape($str) { $str = rawurldecode($str); preg_match_all("/(?:%u.{4})|.+/",$str,$r); $ar = $r[0]; foreach($ar as $k=>$v) { if(substr($v,0,2) == "%u" && strlen($v) == 6) $ar[$k] = iconv("UCS-2","UTF-8",pack("H4",substr($v,-4))); } return join("",$ar); } function send_email($toEmail,$subject,$body,$type="HTML",$option=array()) { vendor('smtp'); if( empty( $option ) ) { $smtp = new smtp("smtp.126.com",25,true,"thiz_lwei@126.com" ,"7897896"); return $smtp -> sendmail($toEmail, "thiz_lwei@126.com", "thiz_lwei", $subject, $body, $type); }else { $smtp = new smtp($option['smtp'],$option['port'],true,$option['username'] ,$option['password']); return $smtp -> sendmail($toEmail, $option['username'],$option['site_name'] , $subject, $body, $type); } } function jiami($txt,$key=null) { if(empty($key)) $key = C('SECURE_CODE'); $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-=+"; $nh = rand(0,64); $ch = $chars[$nh]; $mdKey = md5($key.$ch); $mdKey = substr($mdKey,$nh%8, $nh%8+7); $txt = base64_encode($txt); $tmp = ''; $i=0;$j=0;$k = 0; for ($i=0; $i<strlen($txt); $i++) { $k = $k == strlen($mdKey) ? 0 : $k; $j = ($nh+strpos($chars,$txt[$i])+ord($mdKey[$k++]))%64; $tmp .= $chars[$j]; } return $ch.$tmp; } function jiemi($txt,$key) { if(empty($key)) $key = C('SECURE_CODE'); $chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-=+"; $ch = $txt[0]; $nh = strpos($chars,$ch); $mdKey = md5($key.$ch); $mdKey = substr($mdKey,$nh%8, $nh%8+7); $txt = substr($txt,1); $tmp = ''; $i=0;$j=0; $k = 0; for ($i=0; $i<strlen($txt); $i++) { $k = $k == strlen($mdKey) ? 0 : $k; $j = strpos($chars,$txt[$i])-$nh - ord($mdKey[$k++]); while ($j<0) $j+=64; $tmp .= $chars[$j]; } return base64_decode($tmp); } function getUserFace($uid, $size = 'small') { $size = in_array($size, array('big', 'middle', 'small',"yuan")) ? $size : 'middle'; $uid = abs(intval($uid)); $face_path = getFacePath($uid); $face_file = $face_path.$uid."_".$size."_face.jpg"; if(!file_exists($face_file)) { $uid = abs(intval($uid)); $api = new TS_API(); $info = $api->user_getInfo($uid,"sex"); if( $info['sex'] ) { return __THEME__."/images/pic2.gif"; }else { return __THEME__."/images/pic1.gif"; } }else { $face_path2 = getFaceUrl($uid); } return $face_path2.$uid."_".$size."_face.jpg"; } function getUserFaceId($uid) { if(!$uid) return 0; $map['uid'] = $uid; $map['attach_type'] = 'face'; D('Attach')->find(); } function getFacePath($uid) { $uid = abs(intval($uid)); $uid = sprintf("%09d", $uid); $dir1 = substr($uid, 0, 3); $dir2 = substr($uid, 3, 2); $dir3 = substr($uid, 5, 2); $path = SITE_PATH.'/data/userface/'.$dir1.'/'.$dir2.'/'.$dir3.'/'; checkDir($path); return $path; } function getFaceUrl($uid) { $uid = abs(intval($uid)); $uid = sprintf("%09d", $uid); $dir1 = substr($uid, 0, 3); $dir2 = substr($uid, 3, 2); $dir3 = substr($uid, 5, 2); $path = C("TS_URL").'/data/userface/'.$dir1.'/'.$dir2.'/'.$dir3.'/'; checkDir($path); return $path; } function getUserName($uid) { if($uid && is_numeric($uid)) { $api = new TS_API(); $info = $api->user_getInfo($uid,"name"); $name = getValue($info["name"]); return $name?$name:"没有这个人吧~~"; } } function getUserWo($uid,$mid = null) { if($uid == $mid) return "我"; $uid = abs(intval($uid)); $info = D("User")->field( 'sex' )->find($uid); $sex = explode("-",$info['sex']); return $sex[0] ? "他":"她"; } function getUserSex($uid) { $uid = abs(intval($uid)); $info = D("User")->find($uid); return $info["sex"]?'男':'女'; } function getUserSexArr($uid) { $uid = abs(intval($uid)); $info = D("User")->find($uid); $sex_arr["sex"] = getValue($info["sex"])?'男':'女'; $sex_arr["ta"] = getValue($info["sex"])?'他':'她'; return $sex_arr; } function getUserCity($uid) { $uid = abs(intval($uid)); $info = D("User")->field('current_city,current_province')->find($uid); return getAreaInfo($info['current_province'].','.$info["current_city"]); } function get_ip() { if(getenv('HTTP_CLIENT_IP') && strcasecmp(getenv('HTTP_CLIENT_IP'), 'unknown')) { $ip = getenv('HTTP_CLIENT_IP'); } elseif(getenv('HTTP_X_FORWARDED_FOR') && strcasecmp(getenv('HTTP_X_FORWARDED_FOR'), 'unknown')) { $ip = getenv('HTTP_X_FORWARDED_FOR'); } elseif(getenv('REMOTE_ADDR') && strcasecmp(getenv('REMOTE_ADDR'), 'unknown')) { $ip = getenv('REMOTE_ADDR'); } elseif(isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] && strcasecmp($_SERVER['REMOTE_ADDR'], 'unknown')) { $ip = $_SERVER['REMOTE_ADDR']; } return preg_match("/[\d\.]{7,15}/", $ip, $matches) ? $matches[0] : 'unknown'; } function checkStrong($sPW) { if (strlen($sPW) < 6) return 0; $Modes = 0; for ($i = 0; $i < strlen($sPW); $i++) { $iN = ord($sPW{$i}); if ($iN >= 48 && $iN <= 57) $xxx = 1; elseif ($iN >= 65 && $iN <= 90) $xxx = 2; elseif ($iN >= 97 && $iN <= 122) $xxx = 4; else $xxx = 8; $Modes |= $xxx; } $num = $Modes; $modesx = 0; for ($i = 0; $i < 4; $i++) { if ($num & 1) $modesx++; $num >>= 1; } switch($modesx) { case 1: return "差";break; case 2: return "中等";break; case 3: return "强"; } } function safeEncoding($string,$outEncoding = 'UTF-8') { $encoding = "UTF-8"; for($i=0;$i<strlen($string);$i++) { if(ord($string{$i})<128) continue; if((ord($string{$i})&224)==224) { $char = $string{++$i}; if((ord($char)&128)==128) { $char = $string{++$i}; if((ord($char)&128)==128) { $encoding = "UTF-8"; break; } } } if((ord($string{$i})&192)==192) { $char = $string{++$i}; if((ord($char)&128)==128) { $encoding = "GB2312"; break; } } } if(strtoupper($encoding) == strtoupper($outEncoding)) return $string; else return iconv($encoding,$outEncoding,$string); } function getFriGroup($uid,$fuid) { $map["uid"] = $uid; $map["fuid"] = $fuid; $g = D("Fg")->where($map)->findAll(); foreach($g as $key=>$v) { $gids[] = $v["gid"]; } $map2["id"] = array("IN",$gids); $gnames = D("FriendGroup")->where($map2)->field("name")->findAll(); foreach($gnames as $key=>$v) { $result .= $result?"，".$v["name"]:$v["name"]; } return $result; } function getGroupNum($gid,$uid) { if($gid) $map["gid"] = $gid; $map["uid"] = $uid; $xxx = D("Fg")->where($map)->field("DISTINCT fuid")->findAll(); $num = $xxx?count($xxx):0; return $num; } function getUserMini($uid) { $appconfig = D('AppConfig'); $appconfig->setAppname('mini'); $bq_config = $appconfig->getConfig(); $bq_emotion = D('Smile')->getSmile($bq_config['smiletype']); $mini = D("Mini")->getOneMini($uid,$bq_emotion,$bq_config['smiletype']); return $mini["content"]; } function page($count,$p=1) { if($count <= 1) return; $php_self = "http://".$_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"]; $p_pos = strpos($php_self,"/p"); if($p_pos !== false ) { $php_self = substr($php_self,0,$p_pos); } $p= $_GET["p"]?intval($_GET["p"]):1; $off_set=4; $page_pel=9; if($count<=$page_pel) { $minpage=1; $maxpage=$count; } if($count>$page_pel) { if(($p-$off_set)>0) { $minpage=$p-$off_set; }else { $minpage=1; } if(($p+$off_set)<=$count) { $maxpage=$p+$off_set; }else { $minpage=$count-$off_set*2; $maxpage=$count; } if(($p+$off_set)<$page_pel) { $minpage=1; $maxpage=$page_pel; } } $url=''; $url.="<div id='page' class='page'>"; if($p==1) { $url.="<span class='disabled'>首页</span>"; }else { $url.="<a href='$php_self/p/1'>首页</a>"; } if($p>1) { $url.="<a href='$php_self/p/".($p-1)."'>上一页</a>"; }else { $url.="<span class='disabled'>上一页</span>"; } for($i=$minpage;$i<=$maxpage;$i++) { if($i==$p) { $url.="<span class='current'>".$i."</span>"; }else { $url.="<a href='$php_self/p/".$i."'>".$i."</a>"; } } if($p<$count) { $url.="<a href='$php_self/p/".($p+1)."'>下一页</a><a href='$php_self/p/".$count."'>尾页</a>"; }else { $url.="<span class='disabled'>下一页</span><span class='disabled'>尾页</span>"; } $url.="</div>"; return $url; } function simplode($ids) { return "'".implode("','", $ids)."'"; } function msubstr($str, $start=0, $length, $charset="utf-8", $suffix=true) { if(function_exists("mb_substr")) return mb_substr($str, $start, $length, $charset); elseif(function_exists('iconv_substr')) { return iconv_substr($str,$start,$length,$charset); } $re['utf-8'] = "/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|[\xe0-\xef][\x80-\xbf]{2}|[\xf0-\xff][\x80-\xbf]{3}/"; $re['gb2312'] = "/[\x01-\x7f]|[\xb0-\xf7][\xa0-\xfe]/"; $re['gbk'] = "/[\x01-\x7f]|[\x81-\xfe][\x40-\xfe]/"; $re['big5'] = "/[\x01-\x7f]|[\x81-\xfe]([\x40-\x7e]|\xa1-\xfe])/"; preg_match_all($re[$charset], $str, $match); $slice = join("",array_slice($match[0], $start, $length)); if($suffix) return $slice."..."; return $slice; } function getFieldName($field) { $item["address"] = "地址"; $item["postcode"] = "邮编"; $item["phone"] = "电话"; $item["cellphone"] = "手机"; $item["qq"] = "QQ"; $item["msn"] = "MSN"; $item["birthday"] = "生日"; $item["jiejiao"] = "我想结交"; $item["interest"] = "兴趣爱好"; $item["book"] = "喜欢的书"; $item["film"] = "喜欢的电影"; $item["idol"] = "偶像"; $item["motto"] = "座右铭"; $item["wish"] = "最近心愿"; $item["summary"] = "我的简介"; $item["education"] = "教育信息"; $item["career"] = "工作信息"; $item["ts_areaval"] = "居住地区"; $item["ts_hometown"] = "家乡"; $item["sex"] = "性别"; $item["bloodtype"] = "血型"; $item["birthday_stro"] = "星座"; $item['name'] = "姓名"; return $item[$field]?$item[$field]:$field; } function getPrivacy($v,$mid,$uid) { $full = explode("-", $v); $num = count($full); $privacy = $full[$num-2]; $display = $full[$num-1]; if($display == 0) { return false; }else { if($mid == $uid) { return true; }else { switch($privacy) { case 0: return true; case 1: { $api = new TS_API(); return $api->friend_areFriends($mid,$uid); } case 2 : return false; } } } } function getValue($v) { $val = explode("-", $v, -2); if(!$val) { $info = $v; }else { $info = implode("-", $val); } return $info; } function getPrivNum($arr) { unset($arr[0]); $str = "-".implode("-",$arr); return $str; } function StrLenW($str) { $i = 0; $count = 0; $len = strlen ($str); while ($i < $len) { $chr = ord ($str[$i]); $count++; $i++; if($i >= $len) break; if($chr & 0x80) { $chr <<= 1; while ($chr & 0x80) { $i++; $chr <<= 1; } } } return $count; } function browseCount( $type,$id,$uid,$lifttime = 30 ) { $options = array( 'id'=>$id,'uid'=>$uid,'type'=>$type,'lefttime'=>$lifttime ); return B( 'Browse',$options ); } function filterReply($con) { $con_arr = explode(":",$con,2); return (count($con_arr) == 2)?$con_arr[1]:$con; } function getShort($title,$length=40) { return msubstr($title,0,$length); } function forDisIp($ip_reg) { $ips = str_replace("\d+","*",$ip_reg); $ips = str_replace("\.",".", $ips); $ips = str_replace("|","\n", $ips); return $ips; } function ip_banned($deny_reg,$allow_reg) { $user_ip = get_ip(); if($allow_reg) { $r1 = preg_match("/^(".$allow_reg.")$/", $user_ip); if(!$r1) { session_destroy(); setcookie('remembor',"",time()-3600,"/"); header("Content-type: text/html;charset=utf-8"); exit("你的IP不在允许范围内!"); } } if($deny_reg) { $r2 = preg_match("/^(".$deny_reg.")$/", $user_ip); if($r2) { session_destroy(); setcookie('remembor',"",time()-3600,"/"); header("Content-type: text/html;charset=utf-8"); exit("你的IP被禁止了!"); } } } function thumb( $path,$width,$height ) { return sprintf( "%s/Thumb/?w=%s&h=%s&url=%s",__PUBLIC,$width,$height,$url ); } function imagecreatefrombmp($fname) { $buf=@file_get_contents($fname); if(strlen($buf)<54) return false; $file_header=unpack("sbfType/LbfSize/sbfReserved1/sbfReserved2/LbfOffBits",substr($buf,0,14)); if($file_header["bfType"]!=19778) return false; $info_header=unpack("LbiSize/lbiWidth/lbiHeight/sbiPlanes/sbiBitCountLbiCompression/LbiSizeImage/lbiXPelsPerMeter/lbiYPelsPerMeter/LbiClrUsed/LbiClrImportant",substr($buf,14,40)); if($info_header["biBitCountLbiCompression"]==2) return false; $line_len=round($info_header["biWidth"]*$info_header["biBitCountLbiCompression"]/8); $x=$line_len%4; if($x>0) $line_len+=4-$x; $img=imagecreatetruecolor($info_header["biWidth"],$info_header["biHeight"]); switch($info_header["biBitCountLbiCompression"]) { case 4: $colorset=unpack("L*",substr($buf,54,64)); for($y=0;$y<$info_header["biHeight"];$y++) { $colors=array(); $y_pos=$y*$line_len+$file_header["bfOffBits"]; for($x=0;$x<$info_header["biWidth"];$x++) { if($x%2) $colors[]=$colorset[(ord($buf[$y_pos+($x+1)/2])&0xf)+1]; else $colors[]=$colorset[((ord($buf[$y_pos+$x/2+1])>>4)&0xf)+1]; } imagesetstyle($img,$colors); imageline($img,0,$info_header["biHeight"]-$y-1,$info_header["biWidth"],$info_header["biHeight"]-$y-1,IMG_COLOR_STYLED); } break; case 8: $colorset=unpack("L*",substr($buf,54,1024)); for($y=0;$y<$info_header["biHeight"];$y++) { $colors=array(); $y_pos=$y*$line_len+$file_header["bfOffBits"]; for($x=0;$x<$info_header["biWidth"];$x++) { $colors[]=$colorset[ord($buf[$y_pos+$x])+1]; } imagesetstyle($img,$colors); imageline($img,0,$info_header["biHeight"]-$y-1,$info_header["biWidth"],$info_header["biHeight"]-$y-1,IMG_COLOR_STYLED); } break; case 16: for($y=0;$y<$info_header["biHeight"];$y++) { $colors=array(); $y_pos=$y*$line_len+$file_header["bfOffBits"]; for($x=0;$x<$info_header["biWidth"];$x++) { $i=$x*2; $color=ord($buf[$y_pos+$i])|(ord($buf[$y_pos+$i+1])<<8); $colors[]=imagecolorallocate($img,(($color>>10)&0x1f)*0xff/0x1f,(($color>>5)&0x1f)*0xff/0x1f,($color&0x1f)*0xff/0x1f); } imagesetstyle($img,$colors); imageline($img,0,$info_header["biHeight"]-$y-1,$info_header["biWidth"],$info_header["biHeight"]-$y-1,IMG_COLOR_STYLED); } break; case 24: for($y=0;$y<$info_header["biHeight"];$y++) { $colors=array(); $y_pos=$y*$line_len+$file_header["bfOffBits"]; for($x=0;$x<$info_header["biWidth"];$x++) { $i=$x*3; $colors[]=imagecolorallocate($img,ord($buf[$y_pos+$i+2]),ord($buf[$y_pos+$i+1]),ord($buf[$y_pos+$i])); } imagesetstyle($img,$colors); imageline($img,0,$info_header["biHeight"]-$y-1,$info_header["biWidth"],$info_header["biHeight"]-$y-1,IMG_COLOR_STYLED); } break; default: return false; break; } return $img; } function imagebmp(&$im, $filename = '', $bit = 8, $compression = 0) { if (!in_array($bit, array(1, 4, 8, 16, 24, 32))) { $bit = 8; } else if ($bit == 32) { $bit = 24; } $bits = pow(2, $bit); imagetruecolortopalette($im, true, $bits); $width = imagesx($im); $height = imagesy($im); $colors_num = imagecolorstotal($im); if ($bit <= 8) { $rgb_quad = ''; for ($i = 0; $i < $colors_num; $i ++) { $colors = imagecolorsforindex($im, $i); $rgb_quad .= chr($colors['blue']) . chr($colors['green']) . chr($colors['red']) . "\0"; } $bmp_data = ''; if ($compression == 0 || $bit < 8) { if (!in_array($bit, array(1, 4, 8))) { $bit = 8; } $compression = 0; $extra = ''; $padding = 4 - ceil($width / (8 / $bit)) % 4; if ($padding % 4 != 0) { $extra = str_repeat("\0", $padding); } for ($j = $height - 1; $j >= 0; $j --) { $i = 0; while ($i < $width) { $bin = 0; $limit = $width - $i < 8 / $bit ? (8 / $bit - $width + $i) * $bit : 0; for ($k = 8 - $bit; $k >= $limit; $k -= $bit) { $index = imagecolorat($im, $i, $j); $bin |= $index << $k; $i ++; } $bmp_data .= chr($bin); } $bmp_data .= $extra; } } else if ($compression == 1 && $bit == 8) { for ($j = $height - 1; $j >= 0; $j --) { $last_index = "\0"; $same_num = 0; for ($i = 0; $i <= $width; $i ++) { $index = imagecolorat($im, $i, $j); if ($index !== $last_index || $same_num > 255) { if ($same_num != 0) { $bmp_data .= chr($same_num) . chr($last_index); } $last_index = $index; $same_num = 1; } else { $same_num ++; } } $bmp_data .= "\0\0"; } $bmp_data .= "\0\1"; } $size_quad = strlen($rgb_quad); $size_data = strlen($bmp_data); } else { $extra = ''; $padding = 4 - ($width * ($bit / 8)) % 4; if ($padding % 4 != 0) { $extra = str_repeat("\0", $padding); } $bmp_data = ''; for ($j = $height - 1; $j >= 0; $j --) { for ($i = 0; $i < $width; $i ++) { $index = imagecolorat($im, $i, $j); $colors = imagecolorsforindex($im, $index); if ($bit == 16) { $bin = 0 << $bit; $bin |= ($colors['red'] >> 3) << 10; $bin |= ($colors['green'] >> 3) << 5; $bin |= $colors['blue'] >> 3; $bmp_data .= pack("v", $bin); } else { $bmp_data .= pack("c*", $colors['blue'], $colors['green'], $colors['red']); } } $bmp_data .= $extra; } $size_quad = 0; $size_data = strlen($bmp_data); $colors_num = 0; } $file_header = "BM" . pack("V3", 54 + $size_quad + $size_data, 0, 54 + $size_quad); $info_header = pack("V3v2V*", 0x28, $width, $height, 1, $bit, $compression, $size_data, 0, 0, $colors_num, 0); if ($filename != '') { $fp = fopen("test.bmp", "wb"); fwrite($fp, $file_header); fwrite($fp, $info_header); fwrite($fp, $rgb_quad); fwrite($fp, $bmp_data); fclose($fp); return 1; } header("Content-Type: image/bmp"); echo $file_header . $info_header; echo $rgb_quad; echo $bmp_data; return 1; } function GFW($string) { if(!is_array($string)) { $api = new TS_API(); $site_opts = $api->option_get(); $badkey = $site_opts["gfw_keywords"]; $gfw_rep = $site_opts["gfw_rep"]; $string = preg_replace("/$badkey/i",$gfw_rep,$string); return $string; }else { foreach($string as $key => $val) $string[$key] = GFW($val); return $string; } } function is_email($email) { $pattern="/^([\w\.-]+)@([a-zA-Z0-9-]+)(\.[a-zA-Z\.]+)$/i"; if(preg_match($pattern,$email,$matches)) { return true; }else { return false; } } function getAppNum($uid,$fun) { if(function_exists($fun)) { eval("\$num = ".$fun."(".$uid.");"); }else { $num = 0; } return $num; } function getAppNumx($uid,$left_apps) { $app_map["日志"] = "Blog"; $app_map["相册"] = "Album"; $app_map["视频"] = "Video"; $app_map["分享"] = "Share"; $app_map["心情"] = "Mini"; $app_map["投票"] = "Vote"; $app_map["群组"] = "Groups"; $app_map["活动"] = "Event"; $app_map["电影"] = "Movie"; foreach($left_apps as $k=>$v) { $type = $app_map[$v['name']]; if(function_exists("get".$type."Num")) { eval("\$num = get".$type."Num(".$uid.");"); $apps_num[$type]["num"] = $num; $apps_num[$type]['name'] = $v['name']; $apps_num[$type]['icon'] = $v['icon']; $apps_num[$type]["url"] = getAppUrl($uid,$type); }else { $apps_num[$type]["num"] = 0; $apps_num[$type]['name'] = $v['name']; $apps_num[$type]['icon'] = $v['icon']; $apps_num[$type]["url"] = getAppUrl($uid,$type); } } return $apps_num; } function getAppUrl($uid,$type) { switch($type) { case "Blog" : return __ROOT__."/apps/blog/index.php?s=/Index/personal/uid/".$uid; break; case "Album" : return __ROOT__."/apps/photo/index.php?s=/Index/albums/uid/".$uid; break; case "Vote" : return __ROOT__."/apps/vote/index.php?s=/Index/personal/uid/".$uid; break; case "Share" : return __ROOT__."/apps/Share/index.php?s=/Index/personal/uid/".$uid; break; case "Groups" : return __ROOT__."/apps/group/index.php?s=/Index/index/uid/".$uid; break; case "Mini" : return __ROOT__."/apps/mini/index.php?s=/Index/friends/uid/".$uid; break; } } function getShareNum($uid) { $api = new TS_API(); $num = $api->share_getShareNum($uid); return $num; } function getGroupName($gid) { $data = D('Group',"group")->find($gid); if(empty($data)) return ''; return $data["name"]; } function getTitle( $url,$page, $port = 80,$deadline=60) { $data = ""; $fp = fsockopen( $url,$port,$errno,$errstr,$deadline ); if( !$fp ) { $error_info = sprintf( "错误:%s-%s<br />\n",$errno,$errstr ); echo $error_info; }else { $out = "GET ".$page." HTTP/1.0\r\n"; $out .= "Host: ".$url."\r\n"; $out .= "Content-Type: text/xml; charset=utf-8\r\n"; $out .= "Connection: Close\r\n\r\n"; fwrite($fp, $out); while( !$hasTitle ) { $lines_string = fgetss( $fp,1024,'<title>' ); eregi("<title>(.*)</title>", $lines_string, $head); $data = trim($head[1]); $hasTitle = empty( $data )?false:true; } } return $data; } function isAppAdd($appid,$uid) { $map["appid"] = $appid; $map["uid"] = $uid; $r = D("UserApp")->where($map)->count(); return $r; } function getAreaInfo($area) { $pNetwork = D('Network'); $arrArea = explode(',',$area); foreach ($arrArea as $key=>$val) { if($val) { $areName = $pNetwork->where('id='.$val)->field('title')->find();; $str[] = $areName['title']; } } return implode(' ',$str); } function getUserGroupIcon($uid) { $groupId = TS_D('User')->where('id='.$uid)->field('admin_level')->find(); if($uid) { $info = TS_D('SystemGroup')->where('id='.$groupId['admin_level'])->find(); if($info['icon']) { return '<img src='.__THEME__.'/images/icon/groupicon/'.$info['icon'].' Alt="'.$info['showname'].'" />'; } } } function getAppInfo($appId,$field='') { $api = new TS_API(); return $api->App_getAppInfo($appId,$field); } function isOnlineIcon($uid) { $api = new TS_API(); if($api->UserOnline_isOnline($uid)) { return "<img src=".__THEME__."/images/ico_zx.gif alt='在线' width='11' height='8' border='0'>"; } } function setScore($uid,$action) { $uid = intval($uid); if(!$action || !$uid) { return "-1"; } $api = new TS_API(); $credit_info = $api->CreditSetting_getCredit($uid,$action); $action = $credit_info['id']; if('no_have_action' == $credit_info) return '1'; if ('not_user' === $credit_info) return '0'; $score_result = $api->UserScore_setScore($uid,$credit_info); if ($score_result) { return '200'; } return '404'; } function getCredit($uid,$api){ $type = $api->CreditSetting_getCreditType(); $credit = $api->UserInfo_getCredit($uid); foreach ($type as $key => $value){ $result[$value] = isset($credit[$key])?$credit[$key]:0; } return $result; } function getUserRank($uid){ $api = new TS_API(); $rank_rule = $api->SystemUserRank_getAllRule(); $credit = $api->UserInfo_getCredit($uid); if(empty($credit)) return $rank_rule[0]; foreach ($rank_rule as $key=>$rankValue){ foreach ($credit as $k2=>$score){ $min = $rankValue['rulemin'][$k2]; $max = $rankValue['rulemax'][$k2]; $comm[$k2] = !($min==0 && $max == 0 )? (( $min<= $score) && ($score< $max )):true; if(!$comm[$k2]) unset($rank_rule[$key]); } if(count (array_filter($comm)) != count($credit) ){ continue ; }else{ return $rank_rule[$key]; } } return array_pop($rank_rule); } function setUserScore($uid,$credit){ $api = new TS_API(); $array = array(); foreach ($credit['credit'] as $key=>$score){ $temp = $api->UserScore_checkScore($uid,$key,$score); $array[] = $temp === 0 ? true:$temp ; $credit_rule[$key] = $score; } if(count(array_filter($array)) != count($array)) return false; $credit_rule['action'] = $credit['action']; $credit_rule['actioncn'] = $credit['actioncn']; $credit_rule['info'] = isset($credit['info']) && !empty($credit['info'])?$credit['info']:'{action}{sign}了{score}分{typecn}'; $score_result = $api->UserScore_setScore($uid,$credit_rule); return $score_result; } function getShortMini($title,$length=40){ $title = preg_replace("/<img .*>/i", "", $title); return msubstr($title,0,$length); } function sendMsg($fromUserId,$toUserId,$subject,$msg) { $data["fromUserId"] = $fromUserId; $data["toUserId"] = $toUserId; $data["subject"] = $subject; $data["content"] = $msg; $data["cTime"] = time(); return D("Msg")->add($data); } 
 abstract class Base { public function __set($name ,$value) { if(property_exists($this,$name)){ $this->$name = $value; } } public function __get($name) { if(isset($this->$name)){ return $this->$name; }else { return null; } } protected function parseName($name,$type=0) { if($type) { return ucfirst(preg_replace("/_([a-zA-Z])/e", "strtoupper('\\1')", $name)); }else{ $name = preg_replace("/[A-Z]/", "_\\0", $name); return strtolower(trim($name, "_")); } } } 
 class ThinkException extends Exception { private $type; private $extra; public function __construct($message,$code=0,$extra=false) { parent::__construct($message,$code); $this->type = get_class($this); $this->extra = $extra; } public function __toString() { $trace = $this->getTrace(); if($this->extra) { array_shift($trace); } $this->class = $trace[0]['class']; $this->function = $trace[0]['function']; $this->file = $trace[0]['file']; $this->line = $trace[0]['line']; $file = file($this->file); $traceInfo=''; $time = date("y-m-d H:i:m"); foreach($trace as $t) { $traceInfo .= '['.$time.'] '.$t['file'].' ('.$t['line'].') '; $traceInfo .= $t['class'].$t['type'].$t['function'].'('; $traceInfo .= implode(', ', $t['args']); $traceInfo .=")\n"; } $error['message'] = $this->message; $error['type'] = $this->type; $error['detail'] = L('_MODULE_').'['.MODULE_NAME.'] '.L('_ACTION_').'['.ACTION_NAME.']'."\n"; $error['detail'] .= ($this->line-2).': '.$file[$this->line-3]; $error['detail'] .= ($this->line-1).': '.$file[$this->line-2]; $error['detail'] .= '<font color="#FF6600" >'.($this->line).': <b>'.$file[$this->line-1].'</b></font>'; $error['detail'] .= ($this->line+1).': '.$file[$this->line]; $error['detail'] .= ($this->line+2).': '.$file[$this->line+1]; $error['class'] = $this->class; $error['function'] = $this->function; $error['file'] = $this->file; $error['line'] = $this->line; $error['trace'] = $traceInfo; Log::Write('('.$this->type.') '.$this->message); return $error ; } } 
 class Log extends Base { const EMERG = 'EMERG'; const ALERT = 'ALERT'; const CRIT = 'CRIT'; const ERR = 'ERR'; const WARN = 'WARN'; const NOTICE = 'NOTIC'; const INFO = 'INFO'; const DEBUG = 'DEBUG'; const SQL = 'SQL'; const SYSTEM = 0; const MAIL = 1; const TCP = 2; const FILE = 3; static $log = array(); static $format = '[ c ]'; static function record($message,$level=self::ERR,$record=false) { $arr = array('EMERG','ALERT','CRIT','ERR'); if($record || in_array($level,$arr)) { $now = date(self::$format); self::$log[] = "{$now} {$level}: {$message}\r\n"; } } static function save($type=self::FILE,$destination='',$extra='') { if(empty($destination)) { $destination = LOG_PATH.date('y_m_d').".log"; } if(self::FILE == $type) { if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ){ rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); } } error_log(implode("",self::$log), $type,$destination ,$extra); self::$log = array(); } static function write($message,$level=self::ERR,$type=self::FILE,$destination='',$extra='') { $now = date(self::$format); if(empty($destination)) { $destination = LOG_PATH.date('y_m_d').".log"; } if(self::FILE == $type) { if(is_file($destination) && floor(C('LOG_FILE_SIZE')) <= filesize($destination) ){ rename($destination,dirname($destination).'/'.time().'-'.basename($destination)); } } error_log("{$now} {$level}: {$message}\r\n", $type,$destination,$extra ); } } 
 class App extends Base { public function init() { set_error_handler(array(&$this,"appError")); set_exception_handler(array(&$this,"appException")); if(is_file(RUNTIME_PATH.'~app.php') && (!is_file(CONFIG_PATH.'config.php') || filemtime(RUNTIME_PATH.'~app.php')>filemtime(CONFIG_PATH.'config.php'))) { C(include RUNTIME_PATH.'~app.php'); }else{ $this->build(); } if(C('TAG_PLUGIN_ON')) tag('app_begin'); if(function_exists('date_default_timezone_set')) date_default_timezone_set(C('TIME_ZONE')); if(C('SESSION_AUTO_START')) session_start(); if(C('DISPATCH_ON')) { import('Dispatcher'); Dispatcher::dispatch(); } if(!defined('PHP_FILE')) define('PHP_FILE',_PHP_FILE_); if(!defined('MODULE_NAME')) define('MODULE_NAME', $this->getModule()); if(!defined('ACTION_NAME')) define('ACTION_NAME', $this->getAction()); if(is_file(CONFIG_PATH.strtolower(MODULE_NAME).'_config.php')) C(include CONFIG_PATH.strtolower(MODULE_NAME).'_config.php'); $this->checkLanguage(); $this->checkTemplate(); if(C('HTML_CACHE_ON')) { import('HtmlCache'); HtmlCache::readHTMLCache(); } if(C('TAG_PLUGIN_ON')) tag('app_init'); return ; } private function build() { C(include THINK_PATH.'/Common/convention.php'); if(is_file(CONFIG_PATH.'config.php')) C(include CONFIG_PATH.'config.php'); $common = ''; $debug = C('DEBUG_MODE'); if(is_file(COMMON_PATH.'common.php')) { include COMMON_PATH.'common.php'; if(!$debug) $common .= compile(COMMON_PATH.'common.php'); } $common_ext = glob(COMMON_PATH.'*.common.php'); foreach($common_ext as $file){ require $file; if(!$debug) $common .= compile($file); } if(is_file(CONFIG_PATH.'app.php')) { $list = include CONFIG_PATH.'app.php'; foreach ($list as $file){ require $file; if(!$debug) $common .= compile($file); } } $list = C('EXTEND_CONFIG_LIST'); foreach ($list as $val){ if(is_file(CONFIG_PATH.$val.'.php')) C('_'.$val.'_',include CONFIG_PATH.$val.'.php'); } if($debug) { C(include THINK_PATH.'/Common/debug.php'); if(is_file(CONFIG_PATH.'debug.php')) C(include CONFIG_PATH.'debug.php'); }else{ $content = "<?php ".$common."\nreturn ".var_export(C(),true).";\n?>"; file_put_contents(RUNTIME_PATH.'~app.php',$content); } return ; } private function getModule() { $module = !empty($_POST[C('VAR_MODULE')]) ? $_POST[C('VAR_MODULE')] : (!empty($_GET[C('VAR_MODULE')])? $_GET[C('VAR_MODULE')]:C('DEFAULT_MODULE')); if(C('URL_CASE_INSENSITIVE')) { define('P_MODULE_NAME',strtolower($module)); $module = ucfirst($this->parseName(strtolower($module),1)); } unset($_POST[C('VAR_MODULE')],$_GET[C('VAR_MODULE')]); return $module; } private function getAction() { $action = !empty($_POST[C('VAR_ACTION')]) ? $_POST[C('VAR_ACTION')] : (!empty($_GET[C('VAR_ACTION')])?$_GET[C('VAR_ACTION')]:C('DEFAULT_ACTION')); unset($_POST[C('VAR_ACTION')],$_GET[C('VAR_ACTION')]); return $action; } private function checkLanguage() { if(C('LANG_SWITCH_ON')) { if(C('AUTO_DETECT_LANG')) { if(isset($_GET[C('VAR_LANGUAGE')])) { $langSet = $_GET[C('VAR_LANGUAGE')]; Cookie::set('think_language',$langSet,time()+3600); }elseif ( Cookie::is_set('think_language') ) { $langSet = Cookie::get('think_language'); }else { if(isset($_SERVER['HTTP_ACCEPT_LANGUAGE'])) { preg_match('/^([a-z\-]+)/i', $_SERVER['HTTP_ACCEPT_LANGUAGE'], $matches); $langSet = $matches[1]; Cookie::set('think_language',$langSet,time()+3600); }else{ $langSet = C('DEFAULT_LANGUAGE'); } } }else{ $langSet = C('DEFAULT_LANGUAGE'); } define('LANG_SET',$langSet); if (is_file(THINK_PATH.'/Lang/'.LANG_SET.'.php')){ L(include THINK_PATH.'/Lang/'.LANG_SET.'.php'); }else{ L(include THINK_PATH.'/Lang/'.$defaultLang.'.php'); } if (is_file(LANG_PATH.LANG_SET.'/common.php')) L(include LANG_PATH.LANG_SET.'/common.php'); if (is_file(LANG_PATH.LANG_SET.'/'.strtolower(MODULE_NAME).'.php')) L(include LANG_PATH.LANG_SET.'/'.strtolower(MODULE_NAME).'.php'); }else{ L(include THINK_PATH.'/Lang/'.C('DEFAULT_LANGUAGE').'.php'); } return ; } private function checkTemplate() { if(C('AUTO_DETECT_THEME')) { $t = C('VAR_TEMPLATE'); if ( isset($_GET[$t]) ) { $templateSet = $_GET[$t]; Cookie::set('think_template',$templateSet,time()+3600); } else { if(Cookie::is_set('think_template')) { $templateSet = Cookie::get('think_template'); }else { $templateSet = C('DEFAULT_TEMPLATE'); Cookie::set('think_template',$templateSet,time()+3600); } } if (!is_dir(TMPL_PATH.$templateSet)) { $templateSet = C('DEFAULT_TEMPLATE'); } }else{ $templateSet = C('DEFAULT_TEMPLATE'); } define('TEMPLATE_NAME',$templateSet); define('TEMPLATE_PATH',TMPL_PATH.TEMPLATE_NAME); $tmplDir = TMPL_DIR.'/'.TEMPLATE_NAME.'/'; define('__ROOT__',APP_ROOT); define('__APP__',PHP_FILE); define('__SELF__',$_SERVER['PHP_SELF']); if(C('APP_DOMAIN_DEPLOY')) { $appRoot = '/'; }else{ $appRoot = APP_URL.'/'; } define('__URL__',PHP_FILE.'/'.(defined('P_MODULE_NAME')?P_MODULE_NAME:MODULE_NAME)); define('__ACTION__',__URL__.C('PATH_DEPR').ACTION_NAME); C('TMPL_FILE_NAME',TEMPLATE_PATH.'/'.MODULE_NAME.'/'.ACTION_NAME.C('TEMPLATE_SUFFIX')); define('__CURRENT__', APP_URL.'/'.$tmplDir.MODULE_NAME); define('APP_TMPL_URL', $appRoot.$tmplDir); define('WEB_PUBLIC_URL', WEB_URL.'/Public'); define('APP_PUBLIC_URL', APP_TMPL_URL.'Public'); return ; } public function exec() { $tagOn = C('TAG_PLUGIN_ON'); if($tagOn) tag('app_run'); $module = A(MODULE_NAME); if(!$module) { $_module = C('_modules_.'.MODULE_NAME); if($_module) { import($_module[0]); $class = isset($_module[1])?$_module[1]:MODULE_NAME.'Action'; $module = new $class; }else{ $module = A("Empty"); } if(!$module) { throw_exception(L('_MODULE_NOT_EXIST_').MODULE_NAME); } } $action = ACTION_NAME; if(strpos($action,':')) { $actionList = explode(':',$action); foreach ($actionList as $action){ $module->$action(); } }else{ if (method_exists($module,'_before_'.$action)) { call_user_func(array(&$module,'_before_'.$action)); }else{ if($tagOn) tag('action_before'); } call_user_func(array(&$module,$action)); if (method_exists($module,'_after_'.$action)) { call_user_func(array(&$module,'_after_'.$action)); }else{ if($tagOn) tag('action_after'); } } if($tagOn) tag('app_end'); return ; } public function run() { $this->init(); if(C('SHOW_RUN_TIME')) $GLOBALS['_initTime'] = microtime(TRUE); $this->exec(); $GLOBALS['_endTime'] = microtime(TRUE); if(C('WEB_LOG_RECORD')) Log::save(); return ; } public function appException($e) { halt($e->__toString()); } public function appError($errno, $errstr, $errfile, $errline) { switch ($errno) { case E_ERROR: case E_USER_ERROR: $errorStr = "[$errno] $errstr ".basename($errfile)." 第 $errline 行."; if(C('WEB_LOG_RECORD')) Log::write($errorStr,Log::ERR); halt($errorStr); break; case E_STRICT: case E_USER_WARNING: case E_USER_NOTICE: default: $errorStr = "[$errno] $errstr ".basename($errfile)." 第 $errline 行."; Log::record($errorStr,Log::NOTICE); break; } } }; 
 abstract class Action extends Base { protected $name = ''; protected $view = null; protected $error = ''; protected $mid; protected $uid; protected $my_name; protected $opts; protected $appId =0; protected $api; protected $title; protected $app_title; public function __construct() { $this->tsSetInt(); $this->tsSetAdd($this->opts); $this->setSiteOpts($this->opts); $this->tsSiteClose(); $this->__checkLogin(); $this->mid = $this->api->user_getLoggedInUser(); $this->uid = intval($_GET["uid"])?intval($_GET["uid"]):$this->mid; $this->assign("uid",$this->uid); if(!$this->mid) { $this->tsSetGuest(); }else { ip_banned($this->opts["deny_ips"],$this->opts["allow_ips"]); $user_app_ids = $this->tsGetUserAppId($this->mid); if(APP_NAME!='thinksns' && APP_NAME!='admin') { $this->appId = $this->setAppId(APP_NAME); $this->checkAppId($this->appId,$user_app_ids); } $this->my_name = $this->api->user_getLoggedInName(); $spaceAppList = $this->api->App_getUserAppList('place',$user_app_ids); $appInfo = $this->api->App_getAppInfo($this->appId); $this->assign('APPINFO',$appInfo); $this->assign('user_apps',$this->api->App_getUserAppList()); $spaceAppList = $this->api->App_getUserAppList('place',$user_app_ids); $this->assign($spaceAppList); $this->assign('TS_NEED_LOGIN','1'); $this->assign("mid",$this->mid); $this->assign("my_name",$this->my_name); $this->assign('notify_num',$notify_num); } $this->tsFilterSensitive(); isset($appInfo) && $this->app_title = $appInfo['APP_CNNAME']; $this->setTitle(); if(method_exists($this,'_initialize')) { $this->_initialize(); } } public function setJsToken($key=null){ $token = jiami(microtime(TRUE)); $type = C('OTHER_TOKEN'); Session::set($type,$token); } public function checkJsToken(){ $type = C('OTHER_TOKEN'); $old = Session::get($type); $this->setJsToken(); if(empty($old)) return true; $jiemi_token = jiemi($old); $time = microtime(TRUE) - $jiemi_token ; if( $time < 3){ echo 'error'; exit; }elseif($time<5){ $count = intval(Cookie::get('count_'.$this->appId)); $result = !empty($count)?$count+1:0; if($result == 3){ echo 'fail'; Cookie::set('count_'.$this->appId,0); exit; }else{ Cookie::set('count_'.$this->appId,$result); } } } public function setTitle($title=null){ $this->title = t($title); $this->setSiteTitle($this->title); } protected function setSiteTitle($pageTitle=null){ if (0 != $this->appId) { $preTitle = $this->app_title; } if(!empty($preTitle)){ $title = isset($pageTitle)&&!empty($pageTitle)?$pageTitle.'-'.$preTitle:$preTitle; }else{ $title = $pageTitle; } $this->assign('apps_title',$title); } public function setSiteOpts($opt){ $this->assign("site_opts",$opt); } public function setAppId($name) { return $this->api->App_getChoiceId($name); } protected function __checkLogin() { $temp_query = $this->equalAppNameTrue('THINKSNS') && $this->equalModuleNameTrue('INDEX') && $this->equalAppNameTrue('LOGOUT'); if($temp_query) { setcookie('remembor','',0,'/'); unset($_SESSION['userInfo']); }else { $this->api->user_isRemembor(); } } protected function checkAppId($appid,$user_app_ids) { if(!$appid) { $this->error('您提交的应用尚未启用'); exit; } $applist = $this->api->App_getChoice(); if(in_array($appid,$applist['optional']) && !in_array($appid,$user_app_ids)) { $url = SITE_URL.'/index.php?s=App/add/'.$appid; header("Location: ".$url); exit(); } } protected function equalAppNameTrue($target) { if(strtoupper(APP_NAME) === $target) return true; return false; } protected function equalModuleNameTrue($target) { if(strtoupper(MODULE_NAME) === $target) return true; return false; } protected function equalActionNameTrue($target) { if(strtoupper(ACTION_NAME) === $target) return true; return false; } protected function tsSetAdd($opts) { $ads = D("Ad")->getAds(); $this->assign("ad",$ads); } final protected function tsSetInt() { $this->api = new TS_API(); $this->opts = $this->api->option_get(); $template = $this->opts['template']; define('THEME_PATH' , SITE_PATH."/public/themes/{$template}"); define('THEME_URL' , SITE_URL."/public/themes/{$template}"); define('__THEME__' , SITE_URL."/public/themes/{$template}"); $this->view = View::getInstance(); $this->name = substr(get_class($this),0,-6); } protected function tsFilterSensitive() { $_POST && $_POST = GFW($_POST); $_GET && $_GET = GFW($_GET); $_REQUEST && $_REQUEST = GFW($_REQUEST); } protected function tsSiteClose($opts) { $opts = empty($this->opts)?$opts:$this->opts; if( 1 == $opts ) { $this->redirect("Index/close"); exit(); } } protected function tsSetGuest() { if($this->tsGuestPrivacyEqualTrue()) { $this->assign('TS_NEED_LOGIN','0'); }else { $this->assign('TS_NEED_LOGIN','1'); if(!$this->isAjax()) { $log_refer = "http://".$_SERVER["HTTP_HOST"].$_SERVER["REQUEST_URI"]; Session::set('log_refer',$log_refer); } header("location:".C("TS_URL")."/index.php?s="."/Index/login"); exit; } } protected function tsGuestPrivacyEqualTrue() { $guestpopedom = array( 'THINKSNS'=>array( 'INDEX'=> 'ALL', 'SPACE'=> array( 'INDEX' => 'TRUE', ), 'HOME' => array( 'NETWORK' => 'TRUE', 'FEED' => 'TRUE', ), 'FEED' => array( 'POST_MINI_COUNT' => 'TRUE', 'GET_OTHER_COMMENT' => 'TRUE', ), 'INFORMATION' => 'ALL', ), ); $temp = $guestpopedom[strtoupper(APP_NAME)][strtoupper(MODULE_NAME)]; if($temp[strtoupper(ACTION_NAME)] == 'TRUE' || $temp =='ALL') return true; return false; } protected function tsGetUserAppId($mid) { $user_app = D("UserApp")->where("uid=".$mid)->field("appid")->findAll(); foreach($user_app as $key=>$v) { $result[] = $v["appid"]; } return $result; } public function saveToken() { Cookie::set('lastIp',get_ip(),3600); Cookie::set('lastTime',time(),3600); } public function getAppId() { return $this->appId; } public function isValidToken($reset=false) { $intervalTime =1; $lastTime = Cookie::get('lastTime'); $nowTime = time(); $lastIp = Cookie::get('lastIp'); if((Cookie::get('lastIp') == get_ip() && $nowTime - $lastTime > $intervalTime) || empty($lastTime)){ $this->saveToken(); return ture; }else{ return false; } } protected function isAjax() { if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) ) { if(strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])=='xmlhttprequest') return true; } if(!empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) { return true; } return false; } public function display($templateFile='',$charset='',$contentType='text/html') { $this->view->display($templateFile,$charset,$contentType); } protected function fetch($templateFile='',$charset='',$contentType='text/html') { return $this->view->fetch($templateFile,$charset,$contentType); } protected function buildHtml($htmlfile='',$templateFile='',$charset='',$contentType='text/html') { return $this->view->buildHtml($htmlfile,$templateFile,$charset,$contentType); } public function assign($name,$value='') { $this->view->assign($name,$value); } public function get($name) { return $this->view->get($name); } public function trace($name,$value='') { $this->view->trace($name,$value); } public function __call($method,$parms) { if(strtolower($method) == strtolower(ACTION_NAME)) { $_action = C('_actions_'); if($_action) { if(isset($_action[MODULE_NAME.':'.ACTION_NAME])) { $action = $_action[MODULE_NAME.':'.ACTION_NAME]; }elseif(isset($_action[ACTION_NAME])) { $action = $_action[ACTION_NAME]; } if(!empty($action)) { call_user_func($action); return ; } } if(method_exists($this,'_empty')) { $this->_empty($method,$parms); }else { if(file_exists_case(C('TMPL_FILE_NAME'))) { $this->display(); }else { throw_exception(L('_ERROR_ACTION_').ACTION_NAME); } } }else { throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); } } public function error($errorMsg,$ajax=false) { if($ajax || $this->isAjax()) { $this->ajaxReturn('',$errorMsg,0); }else { C('HTML_CACHE_ON',false); $this->assign('error',$errorMsg); $this->forward(); } } public function success($message,$ajax=false) { if($ajax || $this->isAjax()) { $this->ajaxReturn('',$message,1); }else { C('HTML_CACHE_ON',false); $this->assign('message',$message); $this->forward(); } } public function ajaxReturn($data='',$info='',$status='',$type='') { if(C('WEB_LOG_RECORD')) Log::save(); $result = array(); if($status === '') { $status = $this->get('error')?0:1; } if($info=='') { if($this->get('error')) { $info = $this->get('error'); }elseif($this->get('message')) { $info = $this->get('message'); } } $result['status'] = $status; $result['info'] = $info; $result['data'] = $data; if(empty($type)) $type = C('AJAX_RETURN_TYPE'); if(strtoupper($type)=='JSON') { header("Content-Type:text/html; charset=utf-8"); exit(json_encode($result)); }elseif(strtoupper($type)=='EVAL') { header("Content-Type:text/html; charset=utf-8"); exit($data); }else { } } public function forward($action='_dispatch_jump',$module='',$app='@',$exit=false,$delay=0) { if(!empty($delay)) { sleep(intval($delay)); } if(is_array($action)) { call_user_func($action); }else { if(empty($module)) { call_user_func(array(&$this,$action)); }else { $class = A($module,$app); call_user_func(array(&$class,$action)); } } if($exit) { exit(); }else { return ; } } public function redirect($url,$params=array(),$delay=0,$msg='') { $url = U($url,$params); redirect($url,$delay,$msg); } private function _dispatch_jump() { if($this->isAjax() ) { if($this->get('_ajax_upload_')) { header("Content-Type:text/html; charset=utf-8"); exit($this->get('_ajax_upload_')); }else { $this->ajaxReturn(); } } if($this->get('error') ) { $msgTitle = L('_OPERATION_FAIL_'); }else { $msgTitle = L('_OPERATION_SUCCESS_'); } $this->assign('msgTitle',$msgTitle); if($this->get('message')) { if(!$this->get('waitSecond')) $this->assign('waitSecond',"1"); if(!$this->get('jumpUrl')) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); } if($this->get('error')) { if(!$this->get('waitSecond')) $this->assign('waitSecond',"3"); if(!$this->get('jumpUrl')) $this->assign('jumpUrl',"javascript:history.back(-1);"); } if($this->get('closeWin')) { $this->assign('jumpUrl','javascript:window.close();'); } $this->display(THEME_PATH.'&success'); exit ; } } 
 abstract class Administrator extends Base { protected $name = ''; protected $view = null; protected $uid; protected $userlevel; protected $api; protected $opts; public function __construct() { $this->view = View::getInstance(); $this->name = substr(get_class($this),0,-6); $this->api = new TS_API(); $this->opts = $this->api->option_get(); $template = $this->opts['template']; define('THEME_PATH' , SITE_PATH."/public/themes/{$template}"); define('THEME_URL' , SITE_URL."/public/themes/{$template}"); define('__THEME__' , SITE_URL."/public/themes/{$template}"); $this->uid=$this->api->user_getLoggedInUser(); $loginUser = Session::get('ThinkSnSAdmin'); if($this->uid){ $this->userlevel = $this->api->User_getLoggedInUserLevel(); $groupType = $this->api->SystemGroup_getGroupType($this->userlevel); if($groupType!='admin' && $this->uid!=$this->opts['adminId']){ $this->error('您不是管理员,无权管理'); exit; }elseif (!$loginUser){ if(MODULE_NAME!='Public'){ $url = SITE_URL.'/admin.php?s=/Public/login'; header("Location: ".$url); exit(); } } $this->assign('userId',$this->uid); }else{ if(MODULE_NAME!='Public'){ $url = SITE_URL.'/admin.php?s=/Public/login'; header("Location: ".$url); exit(); } } if(method_exists($this,'_initialize')) { $this->_initialize(); } } public function _ts_init() { $api = new TS_API(); return $api; } protected function isAjax() { if(isset($_SERVER['HTTP_X_REQUESTED_WITH']) ) { if(strtolower($_SERVER['HTTP_X_REQUESTED_WITH'])=='xmlhttprequest') return true; } if(!empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) { return true; } return false; } public function display($templateFile='',$charset='',$contentType='text/html') { $this->view->display($templateFile,$charset,$contentType); } protected function fetch($templateFile='',$charset='',$contentType='text/html') { return $this->view->fetch($templateFile,$charset,$contentType); } protected function buildHtml($htmlfile='',$templateFile='',$charset='',$contentType='text/html') { return $this->view->buildHtml($htmlfile,$templateFile,$charset,$contentType); } public function assign($name,$value='') { $this->view->assign($name,$value); } public function get($name) { return $this->view->get($name); } public function trace($name,$value='') { $this->view->trace($name,$value); } public function __call($method,$parms) { if(strtolower($method) == strtolower(ACTION_NAME)) { $_action = C('_actions_'); if($_action) { if(isset($_action[MODULE_NAME.':'.ACTION_NAME])) { $action = $_action[MODULE_NAME.':'.ACTION_NAME]; }elseif(isset($_action[ACTION_NAME])){ $action = $_action[ACTION_NAME]; } if(!empty($action)) { call_user_func($action); return ; } } if(method_exists($this,'_empty')) { $this->_empty($method,$parms); }else { if(file_exists_case(C('TMPL_FILE_NAME'))) { $this->display(); }else{ throw_exception(L('_ERROR_ACTION_').ACTION_NAME); } } }else{ throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); } } public function error($errorMsg,$ajax=false) { if($ajax || $this->isAjax()) { $this->ajaxReturn('',$errorMsg,0); }else { C('HTML_CACHE_ON',false); $this->assign('error',$errorMsg); $this->forward(); } } public function success($message,$ajax=false) { if($ajax || $this->isAjax()) { $this->ajaxReturn('',$message,1); }else { C('HTML_CACHE_ON',false); $this->assign('message',$message); $this->forward(); } } public function ajaxReturn($data='',$info='',$status='',$type='') { if(C('WEB_LOG_RECORD')) Log::save(); $result = array(); if($status === '') { $status = $this->get('error')?0:1; } if($info=='') { if($this->get('error')) { $info = $this->get('error'); }elseif($this->get('message')) { $info = $this->get('message'); } } $result['status'] = $status; $result['info'] = $info; $result['data'] = $data; if(empty($type)) $type = C('AJAX_RETURN_TYPE'); if(strtoupper($type)=='JSON') { header("Content-Type:text/html; charset=utf-8"); exit(json_encode($result)); }elseif(strtoupper($type)=='EVAL'){ header("Content-Type:text/html; charset=utf-8"); exit($data); }else{ } } public function forward($action='_dispatch_jump',$module='',$app='@',$exit=false,$delay=0) { if(!empty($delay)) { sleep(intval($delay)); } if(is_array($action)) { call_user_func($action); }else { if(empty($module)) { call_user_func(array(&$this,$action)); }else{ $class = A($module,$app); call_user_func(array(&$class,$action)); } } if($exit) { exit(); }else { return ; } } public function redirect($url,$params=array(),$delay=0,$msg='') { $url = U($url,$params); redirect($url,$delay,$msg); } private function _dispatch_jump() { if($this->isAjax() ) { if($this->get('_ajax_upload_')) { header("Content-Type:text/html; charset=utf-8"); exit($this->get('_ajax_upload_')); }else { $this->ajaxReturn(); } } if($this->get('error') ) { $msgTitle = L('_OPERATION_FAIL_'); }else { $msgTitle = L('_OPERATION_SUCCESS_'); } $this->assign('msgTitle',$msgTitle); if($this->get('message')) { if(!$this->get('waitSecond')) $this->assign('waitSecond',"1"); if(!$this->get('jumpUrl')) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); } if($this->get('error')) { if(!$this->get('waitSecond')) $this->assign('waitSecond',"3"); if(!$this->get('jumpUrl')) $this->assign('jumpUrl',"javascript:history.back(-1);"); } if($this->get('closeWin')) { $this->assign('jumpUrl','javascript:window.close();'); } $this->display(PUBLIC_PATH.'/admin'.'&success'); exit ; } }
 class Model extends Base implements IteratorAggregate { const INSERT_STATUS = 1; const UPDATE_STATUS = 2; const ALL_STATUS = 3; protected $db = null; protected $pk = 'id'; protected $tablePrefix = ''; protected $name = ''; protected $dbName = ''; protected $tableName = ''; protected $trueTableName =''; protected $error = ''; protected $data = array(); protected $options = array(); protected $dataList = array(); protected $returnType = 'array'; public function __construct() { $this->_initialize(); $this->name = $this->getModelName(); import("Db"); if(!empty($this->connection)) { $this->db = Db::getInstance($this->connection); }else{ $this->db = Db::getInstance(); } $this->tablePrefix = $this->tablePrefix?$this->tablePrefix:C('DB_PREFIX'); } public static function getInstance() { return get_instance_of(__CLASS__); } public function getIterator() { if(!empty($this->dataList)) { return new ArrayObject($this->dataList); }elseif(!empty($this->data)){ return new ArrayObject($this->data); } } public function __set($name,$value) { $this->data[$name] = $value; } public function __get($name) { if(isset($this->data[$name])) { return $this->data[$name]; }else{ return null; } } public function __call($method,$args) { if(in_array(strtolower($method),array('field','table','where','order','limit','having','group','distinct','lazy'),true)) { $this->options[strtolower($method)] = $args[0]; return $this; }elseif(in_array(strtolower($method),array('count','sum','min','max','avg'),true)){ $field = isset($args[0])?$args[0]:'*'; return $this->getField($method.'('.$field.') AS tp_'.$method); }elseif(strtolower(substr($method,0,5))=='getby') { $field = $this->parseName(substr($method,5)); $options['where'] = $field.'=\''.$args[0].'\''; return $this->find($options); }else{ throw_exception(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); return; } } protected function _initialize() {} protected function _facade($data) { if(isset($this->fields)) { foreach ($data as $key=>$val){ if(!in_array($key,$this->fields,true)) { unset($data[$key]); } } } return $data; } public function add($data='',$options=array()) { if(empty($data)) { if(!empty($this->data)) { $data = $this->data; }else{ $this->error = L('_DATA_TYPE_INVALID_'); return false; } } $options = $this->_parseOptions($options); $data = $this->_facade($data); $this->_before_insert($data,$options); if(false === $result = $this->db->insert($data,$options)){ $this->error = L('_OPERATION_WRONG_'); return false; }else { $insertId = $this->getLastInsID(); if($insertId) { $data[$this->getPk()] = $insertId; $this->_after_insert($data,$options); return $insertId; } return $result; } } protected function _before_insert(&$data,$options) {} protected function _after_insert($data,$options) {} public function save($data='',$options=array()) { if(empty($data)) { if(!empty($this->data)) { $data = $this->data; }else{ $this->error = L('_DATA_TYPE_INVALID_'); return false; } } $data = $this->_facade($data); if(empty($options['where']) && isset($data[$this->getPk()])) { $pk = $this->getPk(); $options['where'] = $pk.'=\''.$data[$pk].'\''; $pkValue = $data[$pk]; unset($data[$pk]); } $options = $this->_parseOptions($options); $this->_before_update($data,$options); if(false === $this->db->update($data,$options)){ $this->error = L('_OPERATION_WRONG_'); return false; }else { if(isset($pkValue)) { $data[$this->getPk()] = $pkValue; } $this->_after_update($data,$options); return true; } } protected function _before_update(&$data,$options) {} protected function _after_update($data,$options) {} public function delete($options=array()) { if(empty($options) && empty($this->options)) { if(!empty($this->data) && isset($this->data[$this->getPk()])) { return $this->delete($this->data[$this->getPk()]); }else{ return false; } } if(is_numeric($options) || is_string($options)) { $where = $this->getPk().'=\''.$options.'\''; $pkValue = $options; $options = array(); $options['where'] = $where; } $options = $this->_parseOptions($options); $result= $this->db->delete($options); if(false === $result ){ $this->error = L('_OPERATION_WRONG_'); return false; }else { $data = array(); if(isset($pkValue)) { $data[$this->getPk()] = $pkValue; } $this->_after_delete($data,$options); return $result; } } protected function _after_delete($data,$options) {} public function select($options=array()) { $options = $this->_parseOptions($options); if($resultSet = $this->db->select($options)) { $this->dataList = $resultSet; $this->_after_select($resultSet,$options); return $this->returnResultSet($resultSet); }else{ return false; } } protected function _after_select(&$result,$options) {} public function findAll($options=array()) { return $this->select($options); } private function _parseOptions($options) { if(is_array($options)) { $options = array_merge($this->options,$options); } $this->options = array(); if(!isset($options['table'])) { $options['table'] =$this->getTableName(); } $this->_options_filter($options); return $options; } protected function _options_filter(&$options) {} public function find($options=array()) { if(is_numeric($options) || is_string($options)) { $where = $this->getPk().'=\''.$options.'\''; $options = array(); $options['where'] = $where; } $options['limit'] = 1; $options = $this->_parseOptions($options); if($result = $this->db->select($options)) { $this->data = $result[0]; $this->_after_find($this->data,$options); return $this->returnResult($this->data); }else{ return false; } } protected function _after_find(&$result,$options) {} protected function returnResult($data,$type='') { if('' === $type) { $type = $this->returnType; } switch($type) { case 'array' : return $data; case 'object': return (object)$data; default: if(class_exists($type)){ return new $type($data); }else{ throw_exception(L('_CLASS_NOT_EXIST_').':'.$type); } } } protected function returnResultSet(&$resultSet,$type='') { foreach ($resultSet as $key=>$data){ $resultSet[$key] = $this->returnResult($data,$type); } return $resultSet; } public function returnAs($type,$classpath=NULL) { $this->returnType = $type; if(NULL !== $classpath) { import($classpath.$type); } return $this; } public function setField($field,$value,$condition='') { if(empty($condition) && isset($this->options['where'])) { $condition = $this->options['where']; } $options['where'] = $condition; if(is_array($field)) { foreach ($field as $key=>$val){ $data[$val] = $value[$key]; } }else{ $data[$field] = $value; } return $this->save($data,$options); } public function getField($field,$condition='') { if(empty($condition) && isset($this->options['where'])) { $condition = $this->options['where']; } $options['where'] = $condition; $options['field'] = $field; $result = $this->find($options); if($result) { return reset($result); }else{ return null; } } public function getFields($field,$condition='',$sepa=' ') { if(empty($condition) && isset($this->options['where'])) { $condition = $this->options['where']; } $options['where'] = $condition; $options['field'] = $field; $rs = $this->select($options); if($rs) { $field = explode(',',$field); $cols = array(); $length = count($field); foreach ($rs as $result){ if($length>1) { $cols[$result[$field[0]]] = ''; for($i=1; $i<$length; $i++) { if($i+1<$length){ $cols[$result[$field[0]]] .= $result[$field[$i]].$sepa; }else{ $cols[$result[$field[0]]] .= $result[$field[$i]]; } } }else{ $cols[] = $result[$field[0]]; } } return $cols; }else{ return null; } } public function create($data='') { if(empty($data)) { $data = $_POST; }elseif(is_object($data)){ $data = get_object_vars($data); }elseif(!is_array($data)){ $this->error = L('_DATA_TYPE_INVALID_'); return false; } $type = self::INSERT_STATUS; if(isset($data[$this->getPk()])) { $pk = $this->getPk(); if($this->field($pk)->where($pk.'=\''.$data[$pk].'\'')->find()) { $type = self::UPDATE_STATUS; } } if(!$this->_before_create($data,$type)) { return false; } if(isset($this->_map)) { foreach ($this->_map as $key=>$val){ if(isset($data[$key])) { $data[$val] = $data[$key]; unset($data[$key]); } } } $this->_after_create($data,$type); $this->data = $data; return $data; } protected function _before_create($data,$type) {return true;} protected function _after_create(&$data,$type) {} public function query($sql) { if(is_array($sql)) { return $this->patchQuery($sql); } if(!empty($sql)) { if(strpos($sql,'__TABLE__')) { $sql = str_replace('__TABLE__',$this->getTableName(),$sql); } return $this->db->query($sql); }else{ return false; } } public function execute($sql='') { if(!empty($sql)) { if(strpos($sql,'__TABLE__')) { $sql = str_replace('__TABLE__',$this->getTableName(),$sql); } $result = $this->db->execute($sql); return $result; }else { return false; } } public function getModelName() { if(empty($this->name)) { $this->name = substr(get_class($this),0,-5); } return $this->name; } public function getTableName() { if(empty($this->trueTableName)) { $tableName = !empty($this->tablePrefix) ? $this->tablePrefix : ''; if(!empty($this->tableName)) { $tableName .= $this->tableName; }elseif(C('AUTO_NAME_IDENTIFY')){ $tableName .= $this->parseName($this->name); }else{ $tableName .= $this->name; } if(!empty($this->dbName)) { $tableName = $this->dbName.'.'.$tableName; } $this->trueTableName = strtolower($tableName); } return $this->trueTableName; } public function startTrans() { $this->commit(); $this->db->startTrans(); return ; } public function commit() { return $this->db->commit(); } public function rollback() { return $this->db->rollback(); } public function getError(){ return $this->error; } public function getDbError() { return $this->db->getError(); } public function getLastInsID() { return $this->db->lastInsID; } public function getLastSql() { return $this->db->getLastSql(); } public function join($join) { if(is_array($join)) { $this->options['join'] = $join; }else{ $this->options['join'][] = $join; } return $this; } public function getPk() { return $this->pk?$this->pk:'id'; } public function count($options = array(),$field='1') { $fields = 'count('.$field.') as count'; $options['limit'] = 1; $options['field'] = $fields; $options = $this->_parseOptions($options); if($result = $this->db->select($options)) { return $result[0]['count']; }else{ return false; } } public function findPage($pageopt,$options=array()) { $options = $this->_parseOptions($options); $count_options = $options; $count_options['limit'] = 1; $count_options['field'] = 'count(1) as count'; $result = $this->db->select($count_options); $count = $result[0]['count']; unset($result); unset($count_options); if($count > 0) { import('ORG.Util.Page'); if( is_numeric($pageopt) ) { $p = new Page($count,intval($pageopt)); }elseif( is_array($pageopt) ){ if( isset($pageopt['size']) && $pageopt['size']>0 ){ $pagesize = intval($pageopt['size']); }else{ $pagesize = intval(C('LIST_NUMBERS')); } $p = new Page($count,$pagesize,$pageopt['param']); }else{ $pagesize = intval(C('LIST_NUMBERS')); $p = new Page($count,$pagesize); } $options['limit'] = $p->firstRow.','.$p->listRows; $resultSet = $this->select($options); if($resultSet){ $this->dataList = $resultSet; $datas = $this->returnResultSet($resultSet); }else{ $datas = ''; } $output['count'] = $count; $output['totalPages'] = $p->totalPages; $output['totalRows'] = $p->totalRows; $output['nowPage'] = $p->nowPage; $output['html'] = $p->show(); $output['data'] = $datas; unset($datas); unset($p); unset($count); }else{ $output['count'] = 0; $output['totalPages'] = 0; $output['totalRows'] = 0; $output['nowPage'] = 1; $output['html'] = ''; $output['data'] = ''; } return $output; } }; 
 class View extends Base { protected $tVar = array(); protected $trace = array(); static function getInstance() { return get_instance_of(__CLASS__); } public function assign($name,$value=''){ if(is_array($name)) { $this->tVar = array_merge($this->tVar,$name); }elseif(is_object($name)){ foreach($name as $key =>$val) { $this->tVar[$key] = $val; } }else { $this->tVar[$name] = $value; } } public function trace($title,$value='') { if(is_array($title)) { $this->trace = array_merge($this->trace,$title); }else { $this->trace[$title] = $value; } } public function get($name){ if(isset($this->tVar[$name])) { return $this->tVar[$name]; }else { return false; } } public function display($templateFile='',$charset='',$contentType='text/html') { $this->fetch($templateFile,$charset,$contentType,true); } public function layout($content,$charset='',$contentType='text/html') { $find = preg_match_all('/<!-- layout::(.+?)::(.+?) -->/is',$content,$matches); if($find) { for ($i=0; $i< $find; $i++) { if(0===strpos($matches[1][$i],'$')){ $matches[1][$i] = $this->get(substr($matches[1][$i],1)); } if(0 != $matches[2][$i] ) { $guid = md5($matches[1][$i]); $cache = S($guid); if($cache) { $layoutContent = $cache; }else{ $layoutContent = $this->fetch($matches[1][$i],$charset,$contentType); S($guid,$layoutContent,$matches[2][$i]); } }else{ $layoutContent = $this->fetch($matches[1][$i],$charset,$contentType); } $content = str_replace($matches[0][$i],$layoutContent,$content); } } return $content; } public function fetch($templateFile='',$charset='',$contentType='text/html',$display=false) { $GLOBALS['_viewStartTime'] = microtime(TRUE); if(null===$templateFile) { return ; } if(empty($charset)) { $charset = C('OUTPUT_CHARSET'); } header("Content-Type:".$contentType."; charset=".$charset); header("Cache-control: private"); ob_start(); ob_implicit_flush(0); if(!file_exists_case($templateFile)){ $templateFile = $this->parseTemplateFile($templateFile); } $this->_before_fetch($templateFile,$charset,$contentType); import('Template'); $template = Template::getInstance(); $template->fetch($templateFile,$this->tVar,$charset); $content = ob_get_clean(); $content = $this->parseTemplatePath($content); $this->_after_fetch($content,$charset,$contentType); $content = $this->layout($content,$charset,$contentType); return $this->output($content,$display); } protected function _before_fetch(&$templateFile,$charset,$contentType) {} protected function _after_fetch(&$content,$charset,$contentType) {} public function buildHtml($htmlfile='',$templateFile='',$charset='',$contentType='text/html') { $content = $this->fetch($templateFile,$charset,$contentType); if(empty($htmlfile)) { $htmlfile = HTML_PATH.rtrim($_SERVER['PATH_INFO'],'/').C('HTML_FILE_SUFFIX'); } if(!is_dir(dirname($htmlfile))) { mk_dir(dirname($htmlfile)); } if(false === file_put_contents($htmlfile,$content)){ throw_exception(L('_CACHE_WRITE_ERROR_')); } return $content; } protected function output($content,$display) { if(C('HTML_CACHE_ON')) { HtmlCache::writeHTMLCache($content); } if(C('TAG_PLUGIN_ON')) tag('view_output',array($content)); if($display) { $showTime = $this->showTime(); echo $content; if(C('SHOW_RUN_TIME')) { echo '<div  id="think_run_time" class="think_run_time">'.$showTime.'</div>'; } $this->showTrace($showTime); return null; }else { return $content; } } private function parseTemplatePath($content) { if(C('TMPL_PARSE_STRING')) { $replace = C('TMPL_PARSE_STRING'); $content = str_replace(array_keys($replace),array_values($replace),$content); } $content = str_replace( array('../Public', '__PUBLIC__', '__TMPL__', '__ROOT__', '__APP__', '__URL__', '__ACTION__', '__SELF__','__THEME__','__TS__'), array(APP_PUBLIC_URL, PUBLIC_URL, APP_TMPL_URL, ROOT_PATH, __APP__, __URL__, __ACTION__, __SELF__, THEME_URL, SITE_URL."/index.php?s="), $content ); return $content; } private function parseTemplateFile($templateFile) { if(''==$templateFile) { $templateFile = C('TMPL_FILE_NAME'); }elseif(strpos($templateFile,'&')){ $templateFile = str_replace('&','/',$templateFile).C('TEMPLATE_SUFFIX'); }elseif(strpos($templateFile,'#')){ $templateFile = LIB_PATH.str_replace(array('#',':'),array('/'.TMPL_DIR.'/'.TEMPLATE_NAME.'/','/'),$templateFile).C('TEMPLATE_SUFFIX'); }elseif(strpos($templateFile,'@')){ $templateFile = TMPL_PATH.str_replace(array('@',':'),'/',$templateFile).C('TEMPLATE_SUFFIX'); }elseif(strpos($templateFile,':')){ $templateFile = TEMPLATE_PATH.'/'.str_replace(':','/',$templateFile).C('TEMPLATE_SUFFIX'); }elseif(!is_file($templateFile)) { $templateFile = dirname(C('TMPL_FILE_NAME')).'/'.$templateFile.C('TEMPLATE_SUFFIX'); } if(!file_exists_case($templateFile)){ throw_exception(L('_TEMPLATE_NOT_EXIST_').'['.$templateFile.']'); } return $templateFile; } protected function showTime() { if(C('SHOW_RUN_TIME')) { $startTime = $GLOBALS['_viewStartTime']; $endTime = microtime(TRUE); $total_run_time = number_format(($endTime - $GLOBALS['_beginTime']), 3); $showTime = 'Process: '.$total_run_time.'s '; if(C('SHOW_ADV_TIME')) { $_load_time = number_format(($GLOBALS['_loadTime'] -$GLOBALS['_beginTime'] ), 3); $_init_time = number_format(($GLOBALS['_initTime'] -$GLOBALS['_loadTime'] ), 3); $_exec_time = number_format(($startTime -$GLOBALS['_initTime'] ), 3); $_parse_time = number_format(($endTime - $startTime), 3); $showTime .= '( Load:'.$_load_time.'s Init:'.$_init_time.'s Exec:'.$_exec_time.'s Template:'.$_parse_time.'s )'; } if(C('SHOW_DB_TIMES') && class_exists('Db',false) ) { $db = Db::getInstance(); $showTime .= ' | DB :'.$db->Q().' queries '.$db->W().' writes '; } if(C('SHOW_CACHE_TIMES') && class_exists('Cache',false)) { $cache = Cache::getInstance(); $showTime .= ' | Cache :'.$cache->Q().' gets '.$cache->W().' writes '; } if(MEMORY_LIMIT_ON && C('SHOW_USE_MEM')) { $startMem = array_sum(explode(' ', $GLOBALS['_startUseMems'])); $endMem = array_sum(explode(' ', memory_get_usage())); $showTime .= ' | UseMem:'. number_format(($endMem - $startMem)/1024).' kb'; } return $showTime; } } protected function showTrace($showTime){ if(C('SHOW_PAGE_TRACE')) { $traceFile = CONFIG_PATH.'trace.php'; if(is_file($traceFile)) { $_trace = include $traceFile; }else{ $_trace = array(); } $this->trace('当前页面', $_SERVER['REQUEST_URI']); $this->trace('请求方法', $_SERVER['REQUEST_METHOD']); $this->trace('通信协议', $_SERVER['SERVER_PROTOCOL']); $this->trace('请求时间', date('Y-m-d H:i:s',$_SERVER['REQUEST_TIME'])); $this->trace('用户代理', $_SERVER['HTTP_USER_AGENT']); $this->trace('会话ID' , session_id()); $this->trace('运行数据', $showTime); $this->trace('加载文件', count(get_included_files())); $log = Log::$log; $this->trace('日志记录',count($log)?count($log).'条日志<br/>'.implode('<br/>',$log):'无日志记录'); $_trace = array_merge($_trace,$this->trace); include C('TRACE_TMPL_FILE'); } } }
 alias_import(array( 'Dispatcher' => THINK_PATH.'/Lib/Think/Util/Dispatcher.class.php', 'HtmlCache' => THINK_PATH.'/Lib/Think/Util/HtmlCache.class.php', 'Db' => THINK_PATH.'/Lib/Think/Db/Db.class.php', 'ThinkTemplate' => THINK_PATH.'/Lib/Think/Template/ThinkTemplate.class.php', 'Template' => THINK_PATH.'/Lib/Think/Util/Template.class.php', 'TagLib' => THINK_PATH.'/Lib/Think/Template/TagLib.class.php', 'Cache' => THINK_PATH.'/Lib/Think/Util/Cache.class.php', 'Cookie' => THINK_PATH.'/Lib/Think/Util/Cookie.class.php', 'Session' => THINK_PATH.'/Lib/Think/Util/Session.class.php', 'TagLibCx' => THINK_PATH.'/Lib/Think/Template/TagLib/TagLibCx.class.php', 'ViewModel' => THINK_PATH.'/Lib/Think/Core/Model/ViewModel.class.php', 'AdvModel' => THINK_PATH.'/Lib/Think/Core/Model/AdvModel.class.php', 'RelationModel' => THINK_PATH.'/Lib/Think/Core/Model/RelationModel.class.php', ) ); 
import('AdvModel'); class AppModel extends AdvModel { protected $_validate = array( array('name','require','应用名必须！',1), array('author','require','开发者必须！',1), array('icon','require','图标必须！',1), array('url','require','目录必须！',1), array('status','require','状态必须！',1), array('describe','require','描述必须！',1), ); function runquery($sql) { $sql = trim($sql); $sql = ereg_replace("\n#[^\n]*\n", "\n", $sql); $buffer = array(); $ret = array(); $in_string = false; for($i=0; $i<strlen($sql)-1; $i++) { if($sql[$i] == ";" && !$in_string) { $ret[] = substr($sql, 0, $i); $sql = substr($sql, $i + 1); $i = 0; } if($in_string && ($sql[$i] == $in_string) && $buffer[1] != "\\") { $in_string = false; } elseif(!$in_string && ($sql[$i] == '"' || $sql[$i] == "'") && (!isset($buffer[0]) || $buffer[0] != "\\")) { $in_string = $sql[$i]; } if(isset($buffer[1])) { $buffer[0] = $buffer[1]; } $buffer[1] = $sql[$i]; } if(!empty($sql)) { $ret[] = $sql; } $errors = 0; for ($i=0; $i<count($ret); $i++) { $ret[$i] = trim($ret[$i]); if(!empty($ret[$i]) && $ret[$i] != "#") { $ret[$i] = str_replace( "#__", $DBPrefix, $ret[$i]); $errors[] = $this->execute($ret[$i]); if($result!='0'){ $errors++; } } } return $errors; } } 
import('AdvModel'); class AdModel extends AdvModel { function getAds() { $data = $this->where("`use` = 1")->field("place,ad")->findAll(); if($data){ foreach($data as $k=>$v){ $ad[$v["place"]] = stripslashes($v["ad"]); } } return $ad; } } 
 require(THINK_PATH."/Api/LW_ORM/LW_ORM.php"); class TS_API { public static $dao; public function __call($fun,$args){ $fun = explode("_",$fun); $model = ucfirst($fun[0]); $method = $fun[1]; if(TS_API::$dao->model_name != $model ) TS_API::$dao = TS_D($model); return (call_user_func_array(array(TS_API::$dao, $method),$args)); } } 